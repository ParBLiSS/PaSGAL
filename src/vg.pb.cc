// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vg.proto

#include "vg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fstruct_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fstruct_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ListValue;
}  // namespace protobuf_google_2fprotobuf_2fstruct_2eproto
namespace protobuf_vg_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BasePileup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Edge;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Edit;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Genotype;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Node;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Snarl;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Support;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_EdgePileup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_NodePileup;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Path;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Subpath;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Mapping;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_Locus;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vg_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_Alignment;
}  // namespace protobuf_vg_2eproto
namespace vg {
class GraphDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Graph>
      _instance;
} _Graph_default_instance_;
class NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Node>
      _instance;
} _Node_default_instance_;
class EdgeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Edge>
      _instance;
} _Edge_default_instance_;
class EditDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Edit>
      _instance;
} _Edit_default_instance_;
class MappingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Mapping>
      _instance;
} _Mapping_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Path>
      _instance;
} _Path_default_instance_;
class AlignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Alignment>
      _instance;
} _Alignment_default_instance_;
class MultipathAlignmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultipathAlignment>
      _instance;
} _MultipathAlignment_default_instance_;
class SubpathDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subpath>
      _instance;
} _Subpath_default_instance_;
class KmerMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KmerMatch>
      _instance;
} _KmerMatch_default_instance_;
class BasePileupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BasePileup>
      _instance;
} _BasePileup_default_instance_;
class NodePileupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodePileup>
      _instance;
} _NodePileup_default_instance_;
class EdgePileupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EdgePileup>
      _instance;
} _EdgePileup_default_instance_;
class PileupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pileup>
      _instance;
} _Pileup_default_instance_;
class SnarlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snarl>
      _instance;
} _Snarl_default_instance_;
class VisitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Visit>
      _instance;
} _Visit_default_instance_;
class SnarlTraversalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SnarlTraversal>
      _instance;
} _SnarlTraversal_default_instance_;
class LocusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Locus>
      _instance;
} _Locus_default_instance_;
class GenotypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Genotype>
      _instance;
} _Genotype_default_instance_;
class SupportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Support>
      _instance;
} _Support_default_instance_;
class LocationSupportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocationSupport>
      _instance;
  const ::vg::Edge* edge_;
  ::google::protobuf::int64 node_id_;
} _LocationSupport_default_instance_;
class TranslationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Translation>
      _instance;
} _Translation_default_instance_;
}  // namespace vg
namespace protobuf_vg_2eproto {
static void InitDefaultsGraph() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Graph_default_instance_;
    new (ptr) ::vg::Graph();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Graph::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Graph =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsGraph}, {
      &protobuf_vg_2eproto::scc_info_Node.base,
      &protobuf_vg_2eproto::scc_info_Edge.base,
      &protobuf_vg_2eproto::scc_info_Path.base,}};

static void InitDefaultsNode() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Node_default_instance_;
    new (ptr) ::vg::Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Node =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNode}, {}};

static void InitDefaultsEdge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Edge_default_instance_;
    new (ptr) ::vg::Edge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Edge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Edge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEdge}, {}};

static void InitDefaultsEdit() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Edit_default_instance_;
    new (ptr) ::vg::Edit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Edit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Edit =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEdit}, {}};

static void InitDefaultsMapping() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Mapping_default_instance_;
    new (ptr) ::vg::Mapping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Mapping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Mapping =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMapping}, {
      &protobuf_vg_2eproto::scc_info_Position.base,
      &protobuf_vg_2eproto::scc_info_Edit.base,}};

static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Position_default_instance_;
    new (ptr) ::vg::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsPath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Path_default_instance_;
    new (ptr) ::vg::Path();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Path::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Path =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPath}, {
      &protobuf_vg_2eproto::scc_info_Mapping.base,}};

static void InitDefaultsAlignment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Alignment_default_instance_;
    new (ptr) ::vg::Alignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Alignment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_Alignment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsAlignment}, {
      &protobuf_vg_2eproto::scc_info_Path.base,
      &protobuf_vg_2eproto::scc_info_Locus.base,
      &protobuf_vg_2eproto::scc_info_Position.base,
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,}};

static void InitDefaultsMultipathAlignment() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_MultipathAlignment_default_instance_;
    new (ptr) ::vg::MultipathAlignment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::MultipathAlignment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MultipathAlignment =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMultipathAlignment}, {
      &protobuf_vg_2eproto::scc_info_Subpath.base,
      &protobuf_google_2fprotobuf_2fstruct_2eproto::scc_info_ListValue.base,}};

static void InitDefaultsSubpath() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Subpath_default_instance_;
    new (ptr) ::vg::Subpath();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Subpath::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Subpath =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSubpath}, {
      &protobuf_vg_2eproto::scc_info_Path.base,}};

static void InitDefaultsKmerMatch() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_KmerMatch_default_instance_;
    new (ptr) ::vg::KmerMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::KmerMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KmerMatch =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKmerMatch}, {}};

static void InitDefaultsBasePileup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_BasePileup_default_instance_;
    new (ptr) ::vg::BasePileup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::BasePileup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BasePileup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBasePileup}, {}};

static void InitDefaultsNodePileup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_NodePileup_default_instance_;
    new (ptr) ::vg::NodePileup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::NodePileup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NodePileup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNodePileup}, {
      &protobuf_vg_2eproto::scc_info_BasePileup.base,}};

static void InitDefaultsEdgePileup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_EdgePileup_default_instance_;
    new (ptr) ::vg::EdgePileup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::EdgePileup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EdgePileup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEdgePileup}, {
      &protobuf_vg_2eproto::scc_info_Edge.base,}};

static void InitDefaultsPileup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Pileup_default_instance_;
    new (ptr) ::vg::Pileup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Pileup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Pileup =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPileup}, {
      &protobuf_vg_2eproto::scc_info_NodePileup.base,
      &protobuf_vg_2eproto::scc_info_EdgePileup.base,}};

static void InitDefaultsSnarl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Snarl_default_instance_;
    new (ptr) ::vg::Snarl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::vg::_Visit_default_instance_;
    new (ptr) ::vg::Visit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Snarl::InitAsDefaultInstance();
  ::vg::Visit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Snarl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSnarl}, {}};

static void InitDefaultsSnarlTraversal() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_SnarlTraversal_default_instance_;
    new (ptr) ::vg::SnarlTraversal();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::SnarlTraversal::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SnarlTraversal =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSnarlTraversal}, {
      &protobuf_vg_2eproto::scc_info_Snarl.base,}};

static void InitDefaultsLocus() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Locus_default_instance_;
    new (ptr) ::vg::Locus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Locus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Locus =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsLocus}, {
      &protobuf_vg_2eproto::scc_info_Path.base,
      &protobuf_vg_2eproto::scc_info_Support.base,
      &protobuf_vg_2eproto::scc_info_Genotype.base,}};

static void InitDefaultsGenotype() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Genotype_default_instance_;
    new (ptr) ::vg::Genotype();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Genotype::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Genotype =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenotype}, {}};

static void InitDefaultsSupport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Support_default_instance_;
    new (ptr) ::vg::Support();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Support::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Support =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSupport}, {}};

static void InitDefaultsLocationSupport() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_LocationSupport_default_instance_;
    new (ptr) ::vg::LocationSupport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::LocationSupport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_LocationSupport =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsLocationSupport}, {
      &protobuf_vg_2eproto::scc_info_Support.base,
      &protobuf_vg_2eproto::scc_info_Edge.base,}};

static void InitDefaultsTranslation() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::vg::_Translation_default_instance_;
    new (ptr) ::vg::Translation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::vg::Translation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Translation =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTranslation}, {
      &protobuf_vg_2eproto::scc_info_Path.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Graph.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Node.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Edge.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Edit.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Mapping.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Path.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Alignment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultipathAlignment.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Subpath.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KmerMatch.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BasePileup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodePileup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EdgePileup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Pileup.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snarl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SnarlTraversal.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Locus.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Genotype.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Support.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocationSupport.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Translation.base);
}

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Graph, node_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Graph, edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Graph, path_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Node, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Node, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Node, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edge, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edge, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edge, from_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edge, to_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edge, overlap_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edit, from_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edit, to_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Edit, sequence_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Mapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Mapping, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Mapping, edit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Mapping, rank_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Position, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Position, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Position, is_reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Position, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Path, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Path, mapping_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Path, is_circular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Path, length_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, mapping_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, query_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, sample_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, read_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, fragment_prev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, fragment_next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, is_secondary_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, identity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, locus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, refpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, read_paired_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, read_mapped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, mate_unmapped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, read_on_reverse_strand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, mate_on_reverse_strand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, soft_clipped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, discordant_insert_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, uniqueness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, secondary_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, fragment_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, mate_mapped_to_disjoint_subgraph_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, fragment_length_distribution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, haplotype_scored_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, haplotype_logprob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, time_used_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, to_correct_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, correctly_mapped_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Alignment, annotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, sample_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, read_group_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, subpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, mapping_quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, paired_read_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::MultipathAlignment, annotation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Subpath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Subpath, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Subpath, next_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Subpath, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::KmerMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::KmerMatch, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::KmerMatch, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::KmerMatch, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::KmerMatch, backward_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::BasePileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::BasePileup, ref_base_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::BasePileup, num_bases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::BasePileup, bases_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::BasePileup, qualities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::NodePileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::NodePileup, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::NodePileup, base_pileup_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::EdgePileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::EdgePileup, edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::EdgePileup, num_reads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::EdgePileup, num_forward_reads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::EdgePileup, qualities_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Pileup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Pileup, node_pileups_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Pileup, edge_pileups_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, start_self_reachable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, end_self_reachable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, start_end_reachable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Snarl, directed_acyclic_net_graph_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Visit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Visit, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Visit, snarl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Visit, backward_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::SnarlTraversal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::SnarlTraversal, visit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::SnarlTraversal, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, allele_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, genotype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, overall_support_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Locus, allele_log_likelihood_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, allele_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, is_phased_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, log_likelihood_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, log_prior_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Genotype, log_posterior_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Support, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Support, quality_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Support, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Support, reverse_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Support, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Support, right_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::LocationSupport, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::LocationSupport, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::LocationSupport, support_),
  offsetof(::vg::LocationSupportDefaultTypeInternal, edge_),
  offsetof(::vg::LocationSupportDefaultTypeInternal, node_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::LocationSupport, oneof_location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Translation, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::vg::Translation, to_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vg::Graph)},
  { 8, -1, sizeof(::vg::Node)},
  { 16, -1, sizeof(::vg::Edge)},
  { 26, -1, sizeof(::vg::Edit)},
  { 34, -1, sizeof(::vg::Mapping)},
  { 42, -1, sizeof(::vg::Position)},
  { 51, -1, sizeof(::vg::Path)},
  { 60, -1, sizeof(::vg::Alignment)},
  { 100, -1, sizeof(::vg::MultipathAlignment)},
  { 115, -1, sizeof(::vg::Subpath)},
  { 123, -1, sizeof(::vg::KmerMatch)},
  { 132, -1, sizeof(::vg::BasePileup)},
  { 141, -1, sizeof(::vg::NodePileup)},
  { 148, -1, sizeof(::vg::EdgePileup)},
  { 157, -1, sizeof(::vg::Pileup)},
  { 164, -1, sizeof(::vg::Snarl)},
  { 178, -1, sizeof(::vg::Visit)},
  { 186, -1, sizeof(::vg::SnarlTraversal)},
  { 193, -1, sizeof(::vg::Locus)},
  { 204, -1, sizeof(::vg::Genotype)},
  { 215, -1, sizeof(::vg::Support)},
  { 225, -1, sizeof(::vg::LocationSupport)},
  { 234, -1, sizeof(::vg::Translation)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Graph_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Edit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Mapping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Path_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Alignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_MultipathAlignment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Subpath_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_KmerMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_BasePileup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_NodePileup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_EdgePileup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Pileup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Snarl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Visit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_SnarlTraversal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Locus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Genotype_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Support_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_LocationSupport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::vg::_Translation_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "vg.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\010vg.proto\022\002vg\032\034google/protobuf/struct.p"
      "roto\"O\n\005Graph\022\026\n\004node\030\001 \003(\0132\010.vg.Node\022\026\n"
      "\004edge\030\002 \003(\0132\010.vg.Edge\022\026\n\004path\030\003 \003(\0132\010.vg"
      ".Path\"2\n\004Node\022\020\n\010sequence\030\001 \001(\t\022\014\n\004name\030"
      "\002 \001(\t\022\n\n\002id\030\003 \001(\003\"U\n\004Edge\022\014\n\004from\030\001 \001(\003\022"
      "\n\n\002to\030\002 \001(\003\022\022\n\nfrom_start\030\003 \001(\010\022\016\n\006to_en"
      "d\030\004 \001(\010\022\017\n\007overlap\030\005 \001(\005\"@\n\004Edit\022\023\n\013from"
      "_length\030\001 \001(\005\022\021\n\tto_length\030\002 \001(\005\022\020\n\010sequ"
      "ence\030\003 \001(\t\"O\n\007Mapping\022\036\n\010position\030\001 \001(\0132"
      "\014.vg.Position\022\026\n\004edit\030\002 \003(\0132\010.vg.Edit\022\014\n"
      "\004rank\030\005 \001(\003\"M\n\010Position\022\017\n\007node_id\030\001 \001(\003"
      "\022\016\n\006offset\030\002 \001(\003\022\022\n\nis_reverse\030\004 \001(\010\022\014\n\004"
      "name\030\005 \001(\t\"W\n\004Path\022\014\n\004name\030\001 \001(\t\022\034\n\007mapp"
      "ing\030\002 \003(\0132\013.vg.Mapping\022\023\n\013is_circular\030\003 "
      "\001(\010\022\016\n\006length\030\004 \001(\003\"\223\007\n\tAlignment\022\020\n\010seq"
      "uence\030\001 \001(\t\022\026\n\004path\030\002 \001(\0132\010.vg.Path\022\014\n\004n"
      "ame\030\003 \001(\t\022\017\n\007quality\030\004 \001(\014\022\027\n\017mapping_qu"
      "ality\030\005 \001(\005\022\r\n\005score\030\006 \001(\005\022\026\n\016query_posi"
      "tion\030\007 \001(\005\022\023\n\013sample_name\030\t \001(\t\022\022\n\nread_"
      "group\030\n \001(\t\022$\n\rfragment_prev\030\013 \001(\0132\r.vg."
      "Alignment\022$\n\rfragment_next\030\014 \001(\0132\r.vg.Al"
      "ignment\022\024\n\014is_secondary\030\017 \001(\010\022\020\n\010identit"
      "y\030\020 \001(\001\022\032\n\010fragment\030\021 \003(\0132\010.vg.Path\022\030\n\005l"
      "ocus\030\022 \003(\0132\t.vg.Locus\022\034\n\006refpos\030\023 \003(\0132\014."
      "vg.Position\022\023\n\013read_paired\030\024 \001(\010\022\023\n\013read"
      "_mapped\030\025 \001(\010\022\025\n\rmate_unmapped\030\026 \001(\010\022\036\n\026"
      "read_on_reverse_strand\030\027 \001(\010\022\036\n\026mate_on_"
      "reverse_strand\030\030 \001(\010\022\024\n\014soft_clipped\030\031 \001"
      "(\010\022\036\n\026discordant_insert_size\030\032 \001(\010\022\022\n\nun"
      "iqueness\030\033 \001(\001\022\017\n\007correct\030\034 \001(\001\022\027\n\017secon"
      "dary_score\030\035 \003(\005\022\026\n\016fragment_score\030\036 \001(\001"
      "\022(\n mate_mapped_to_disjoint_subgraph\030\037 \001"
      "(\010\022$\n\034fragment_length_distribution\030  \001(\t"
      "\022\030\n\020haplotype_scored\030! \001(\010\022\031\n\021haplotype_"
      "logprob\030\" \001(\001\022\021\n\ttime_used\030# \001(\001\022 \n\nto_c"
      "orrect\030$ \001(\0132\014.vg.Position\022\030\n\020correctly_"
      "mapped\030% \001(\010\022+\n\nannotation\030d \001(\0132\027.googl"
      "e.protobuf.Struct\"\373\001\n\022MultipathAlignment"
      "\022\020\n\010sequence\030\001 \001(\t\022\017\n\007quality\030\002 \001(\014\022\014\n\004n"
      "ame\030\003 \001(\t\022\023\n\013sample_name\030\004 \001(\t\022\022\n\nread_g"
      "roup\030\005 \001(\t\022\034\n\007subpath\030\006 \003(\0132\013.vg.Subpath"
      "\022\027\n\017mapping_quality\030\007 \001(\005\022\r\n\005start\030\010 \003(\r"
      "\022\030\n\020paired_read_name\030\t \001(\t\022+\n\nannotation"
      "\030d \001(\0132\027.google.protobuf.Struct\">\n\007Subpa"
      "th\022\026\n\004path\030\001 \001(\0132\010.vg.Path\022\014\n\004next\030\002 \003(\r"
      "\022\r\n\005score\030\003 \001(\005\"R\n\tKmerMatch\022\020\n\010sequence"
      "\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\003\022\020\n\010position\030\003 \001("
      "\021\022\020\n\010backward\030\004 \001(\010\"S\n\nBasePileup\022\020\n\010ref"
      "_base\030\001 \001(\005\022\021\n\tnum_bases\030\002 \001(\005\022\r\n\005bases\030"
      "\003 \001(\t\022\021\n\tqualities\030\004 \001(\014\"B\n\nNodePileup\022\017"
      "\n\007node_id\030\001 \001(\003\022#\n\013base_pileup\030\002 \003(\0132\016.v"
      "g.BasePileup\"e\n\nEdgePileup\022\026\n\004edge\030\001 \001(\013"
      "2\010.vg.Edge\022\021\n\tnum_reads\030\002 \001(\005\022\031\n\021num_for"
      "ward_reads\030\003 \001(\005\022\021\n\tqualities\030\004 \001(\014\"T\n\006P"
      "ileup\022$\n\014node_pileups\030\001 \003(\0132\016.vg.NodePil"
      "eup\022$\n\014edge_pileups\030\002 \003(\0132\016.vg.EdgePileu"
      "p\"\372\001\n\005Snarl\022\033\n\004type\030\001 \001(\0162\r.vg.SnarlType"
      "\022\030\n\005start\030\002 \001(\0132\t.vg.Visit\022\026\n\003end\030\003 \001(\0132"
      "\t.vg.Visit\022\031\n\006parent\030\004 \001(\0132\t.vg.Snarl\022\014\n"
      "\004name\030\005 \001(\t\022\034\n\024start_self_reachable\030\006 \001("
      "\010\022\032\n\022end_self_reachable\030\007 \001(\010\022\033\n\023start_e"
      "nd_reachable\030\010 \001(\010\022\"\n\032directed_acyclic_n"
      "et_graph\030\t \001(\010\"D\n\005Visit\022\017\n\007node_id\030\001 \001(\003"
      "\022\030\n\005snarl\030\002 \001(\0132\t.vg.Snarl\022\020\n\010backward\030\003"
      " \001(\010\"8\n\016SnarlTraversal\022\030\n\005visit\030\001 \003(\0132\t."
      "vg.Visit\022\014\n\004name\030\002 \001(\t\"\262\001\n\005Locus\022\014\n\004name"
      "\030\001 \001(\t\022\030\n\006allele\030\002 \003(\0132\010.vg.Path\022\034\n\007supp"
      "ort\030\003 \003(\0132\013.vg.Support\022\036\n\010genotype\030\004 \003(\013"
      "2\014.vg.Genotype\022$\n\017overall_support\030\005 \001(\0132"
      "\013.vg.Support\022\035\n\025allele_log_likelihood\030\006 "
      "\003(\001\"\203\001\n\010Genotype\022\016\n\006allele\030\001 \003(\005\022\021\n\tis_p"
      "hased\030\002 \001(\010\022\022\n\nlikelihood\030\003 \001(\001\022\026\n\016log_l"
      "ikelihood\030\004 \001(\001\022\021\n\tlog_prior\030\005 \001(\001\022\025\n\rlo"
      "g_posterior\030\006 \001(\001\"Y\n\007Support\022\017\n\007quality\030"
      "\001 \001(\001\022\017\n\007forward\030\002 \001(\001\022\017\n\007reverse\030\003 \001(\001\022"
      "\014\n\004left\030\004 \001(\001\022\r\n\005right\030\005 \001(\001\"n\n\017Location"
      "Support\022\034\n\007support\030\001 \001(\0132\013.vg.Support\022\030\n"
      "\004edge\030\002 \001(\0132\010.vg.EdgeH\000\022\021\n\007node_id\030\003 \001(\003"
      "H\000B\020\n\016oneof_location\";\n\013Translation\022\026\n\004f"
      "rom\030\001 \001(\0132\010.vg.Path\022\024\n\002to\030\002 \001(\0132\010.vg.Pat"
      "h*9\n\tSnarlType\022\020\n\014UNCLASSIFIED\020\000\022\017\n\013ULTR"
      "ABUBBLE\020\001\022\t\n\005UNARY\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vg.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_vg_2eproto
namespace vg {
const ::google::protobuf::EnumDescriptor* SnarlType_descriptor() {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_vg_2eproto::file_level_enum_descriptors[0];
}
bool SnarlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Graph::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graph::kNodeFieldNumber;
const int Graph::kEdgeFieldNumber;
const int Graph::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graph::Graph()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Graph.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Graph)
}
Graph::Graph(const Graph& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_(from.node_),
      edge_(from.edge_),
      path_(from.path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vg.Graph)
}

void Graph::SharedCtor() {
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:vg.Graph)
  SharedDtor();
}

void Graph::SharedDtor() {
}

void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Graph::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Graph& Graph::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Graph.base);
  return *internal_default_instance();
}


void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.Clear();
  edge_.Clear();
  path_.Clear();
  _internal_metadata_.Clear();
}

bool Graph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Graph)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Node node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Edge edge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Path path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Graph)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Graph)
  return false;
#undef DO_
}

void Graph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node(static_cast<int>(i)),
      output);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->edge(static_cast<int>(i)),
      output);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->path(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Graph)
}

::google::protobuf::uint8* Graph::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Graph)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.Node node = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.Edge edge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->edge(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.Path path = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->path_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->path(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Graph)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Node node = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node(static_cast<int>(i)));
    }
  }

  // repeated .vg.Edge edge = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edge(static_cast<int>(i)));
    }
  }

  // repeated .vg.Path path = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->path_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->path(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graph>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Graph)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_.MergeFrom(from.node_);
  edge_.MergeFrom(from.edge_);
  path_.MergeFrom(from.path_);
}

void Graph::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::Swap(Graph* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graph::InternalSwap(Graph* other) {
  using std::swap;
  CastToBase(&node_)->InternalSwap(CastToBase(&other->node_));
  CastToBase(&edge_)->InternalSwap(CastToBase(&other->edge_));
  CastToBase(&path_)->InternalSwap(CastToBase(&other->path_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Graph::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Node::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Node::kSequenceFieldNumber;
const int Node::kNameFieldNumber;
const int Node::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Node::Node()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Node.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Node)
}
Node::Node(const Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:vg.Node)
}

void Node::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:vg.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Node& Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Node.base);
  return *internal_default_instance();
}


void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Node.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Node.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Node)
}

::google::protobuf::uint8* Node::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Node.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // int64 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Node)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const Node* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Node>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Node)
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::Swap(Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Node::InternalSwap(Node* other) {
  using std::swap;
  sequence_.Swap(&other->sequence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Edge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kFromFieldNumber;
const int Edge::kToFieldNumber;
const int Edge::kFromStartFieldNumber;
const int Edge::kToEndFieldNumber;
const int Edge::kOverlapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Edge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&overlap_) -
    reinterpret_cast<char*>(&from_)) + sizeof(overlap_));
  // @@protoc_insertion_point(copy_constructor:vg.Edge)
}

void Edge::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlap_) -
      reinterpret_cast<char*>(&from_)) + sizeof(overlap_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:vg.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
}

void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Edge& Edge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Edge.base);
  return *internal_default_instance();
}


void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overlap_) -
      reinterpret_cast<char*>(&from_)) + sizeof(overlap_));
  _internal_metadata_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Edge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool from_start = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool to_end = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 overlap = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overlap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->from(), output);
  }

  // int64 to = 2;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->to(), output);
  }

  // bool from_start = 3;
  if (this->from_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_start(), output);
  }

  // bool to_end = 4;
  if (this->to_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->to_end(), output);
  }

  // int32 overlap = 5;
  if (this->overlap() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->overlap(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 from = 1;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->from(), target);
  }

  // int64 to = 2;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->to(), target);
  }

  // bool from_start = 3;
  if (this->from_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_start(), target);
  }

  // bool to_end = 4;
  if (this->to_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->to_end(), target);
  }

  // int32 overlap = 5;
  if (this->overlap() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->overlap(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Edge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->from());
  }

  // int64 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->to());
  }

  // bool from_start = 3;
  if (this->from_start() != 0) {
    total_size += 1 + 1;
  }

  // bool to_end = 4;
  if (this->to_end() != 0) {
    total_size += 1 + 1;
  }

  // int32 overlap = 5;
  if (this->overlap() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->overlap());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.from_start() != 0) {
    set_from_start(from.from_start());
  }
  if (from.to_end() != 0) {
    set_to_end(from.to_end());
  }
  if (from.overlap() != 0) {
    set_overlap(from.overlap());
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  using std::swap;
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(from_start_, other->from_start_);
  swap(to_end_, other->to_end_);
  swap(overlap_, other->overlap_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Edit::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edit::kFromLengthFieldNumber;
const int Edit::kToLengthFieldNumber;
const int Edit::kSequenceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edit::Edit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Edit.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Edit)
}
Edit::Edit(const Edit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  ::memcpy(&from_length_, &from.from_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_length_) -
    reinterpret_cast<char*>(&from_length_)) + sizeof(to_length_));
  // @@protoc_insertion_point(copy_constructor:vg.Edit)
}

void Edit::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_length_) -
      reinterpret_cast<char*>(&from_length_)) + sizeof(to_length_));
}

Edit::~Edit() {
  // @@protoc_insertion_point(destructor:vg.Edit)
  SharedDtor();
}

void Edit::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Edit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Edit::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Edit& Edit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Edit.base);
  return *internal_default_instance();
}


void Edit::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Edit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_length_) -
      reinterpret_cast<char*>(&from_length_)) + sizeof(to_length_));
  _internal_metadata_.Clear();
}

bool Edit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Edit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 from_length = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 to_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &to_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequence = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Edit.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Edit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Edit)
  return false;
#undef DO_
}

void Edit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Edit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_length = 1;
  if (this->from_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->from_length(), output);
  }

  // int32 to_length = 2;
  if (this->to_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->to_length(), output);
  }

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sequence(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Edit)
}

::google::protobuf::uint8* Edit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Edit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from_length = 1;
  if (this->from_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->from_length(), target);
  }

  // int32 to_length = 2;
  if (this->to_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->to_length(), target);
  }

  // string sequence = 3;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Edit.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sequence(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Edit)
  return target;
}

size_t Edit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Edit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sequence = 3;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // int32 from_length = 1;
  if (this->from_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from_length());
  }

  // int32 to_length = 2;
  if (this->to_length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->to_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Edit)
  GOOGLE_DCHECK_NE(&from, this);
  const Edit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Edit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Edit)
    MergeFrom(*source);
  }
}

void Edit::MergeFrom(const Edit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Edit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.from_length() != 0) {
    set_from_length(from.from_length());
  }
  if (from.to_length() != 0) {
    set_to_length(from.to_length());
  }
}

void Edit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Edit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edit::CopyFrom(const Edit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Edit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edit::IsInitialized() const {
  return true;
}

void Edit::Swap(Edit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edit::InternalSwap(Edit* other) {
  using std::swap;
  sequence_.Swap(&other->sequence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_length_, other->from_length_);
  swap(to_length_, other->to_length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Edit::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Mapping::InitAsDefaultInstance() {
  ::vg::_Mapping_default_instance_._instance.get_mutable()->position_ = const_cast< ::vg::Position*>(
      ::vg::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mapping::kPositionFieldNumber;
const int Mapping::kEditFieldNumber;
const int Mapping::kRankFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mapping::Mapping()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Mapping.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Mapping)
}
Mapping::Mapping(const Mapping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      edit_(from.edit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::vg::Position(*from.position_);
  } else {
    position_ = NULL;
  }
  rank_ = from.rank_;
  // @@protoc_insertion_point(copy_constructor:vg.Mapping)
}

void Mapping::SharedCtor() {
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rank_) -
      reinterpret_cast<char*>(&position_)) + sizeof(rank_));
}

Mapping::~Mapping() {
  // @@protoc_insertion_point(destructor:vg.Mapping)
  SharedDtor();
}

void Mapping::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void Mapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Mapping::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Mapping& Mapping::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Mapping.base);
  return *internal_default_instance();
}


void Mapping::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Mapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edit_.Clear();
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  rank_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool Mapping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Mapping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vg.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Edit edit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 rank = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rank_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Mapping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Mapping)
  return false;
#undef DO_
}

void Mapping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Mapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_position(), output);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edit_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->edit(static_cast<int>(i)),
      output);
  }

  // int64 rank = 5;
  if (this->rank() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->rank(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Mapping)
}

::google::protobuf::uint8* Mapping::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Mapping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_position(), deterministic, target);
  }

  // repeated .vg.Edit edit = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edit_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->edit(static_cast<int>(i)), deterministic, target);
  }

  // int64 rank = 5;
  if (this->rank() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->rank(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Mapping)
  return target;
}

size_t Mapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Mapping)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Edit edit = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->edit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edit(static_cast<int>(i)));
    }
  }

  // .vg.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 rank = 5;
  if (this->rank() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->rank());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mapping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  const Mapping* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Mapping>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Mapping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Mapping)
    MergeFrom(*source);
  }
}

void Mapping::MergeFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Mapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edit_.MergeFrom(from.edit_);
  if (from.has_position()) {
    mutable_position()->::vg::Position::MergeFrom(from.position());
  }
  if (from.rank() != 0) {
    set_rank(from.rank());
  }
}

void Mapping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mapping::CopyFrom(const Mapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Mapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mapping::IsInitialized() const {
  return true;
}

void Mapping::Swap(Mapping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mapping::InternalSwap(Mapping* other) {
  using std::swap;
  CastToBase(&edit_)->InternalSwap(CastToBase(&other->edit_));
  swap(position_, other->position_);
  swap(rank_, other->rank_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Mapping::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kNodeIdFieldNumber;
const int Position::kOffsetFieldNumber;
const int Position::kIsReverseFieldNumber;
const int Position::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reverse_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(is_reverse_));
  // @@protoc_insertion_point(copy_constructor:vg.Position)
}

void Position::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reverse_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(is_reverse_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:vg.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reverse_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(is_reverse_));
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_reverse = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Position.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->offset(), output);
  }

  // bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_reverse(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Position.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->offset(), target);
  }

  // bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_reverse(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Position.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // int64 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->offset());
  }

  // bool is_reverse = 4;
  if (this->is_reverse() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.offset() != 0) {
    set_offset(from.offset());
  }
  if (from.is_reverse() != 0) {
    set_is_reverse(from.is_reverse());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(offset_, other->offset_);
  swap(is_reverse_, other->is_reverse_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Path::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Path::kNameFieldNumber;
const int Path::kMappingFieldNumber;
const int Path::kIsCircularFieldNumber;
const int Path::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Path::Path()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Path.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Path)
}
Path::Path(const Path& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mapping_(from.mapping_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_circular_) -
    reinterpret_cast<char*>(&length_)) + sizeof(is_circular_));
  // @@protoc_insertion_point(copy_constructor:vg.Path)
}

void Path::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_circular_) -
      reinterpret_cast<char*>(&length_)) + sizeof(is_circular_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:vg.Path)
  SharedDtor();
}

void Path::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Path::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Path& Path::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Path.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mapping_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_circular_) -
      reinterpret_cast<char*>(&length_)) + sizeof(is_circular_));
  _internal_metadata_.Clear();
}

bool Path::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Path)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Path.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Mapping mapping = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_mapping()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_circular = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_circular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Path)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Path)
  return false;
#undef DO_
}

void Path::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mapping_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->mapping(static_cast<int>(i)),
      output);
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_circular(), output);
  }

  // int64 length = 4;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->length(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Path)
}

::google::protobuf::uint8* Path::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Path)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Path.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .vg.Mapping mapping = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mapping_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->mapping(static_cast<int>(i)), deterministic, target);
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_circular(), target);
  }

  // int64 length = 4;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->length(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Path)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Mapping mapping = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->mapping_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mapping(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->length());
  }

  // bool is_circular = 3;
  if (this->is_circular() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Path>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Path)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mapping_.MergeFrom(from.mapping_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.is_circular() != 0) {
    set_is_circular(from.is_circular());
  }
}

void Path::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::Swap(Path* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Path::InternalSwap(Path* other) {
  using std::swap;
  CastToBase(&mapping_)->InternalSwap(CastToBase(&other->mapping_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(length_, other->length_);
  swap(is_circular_, other->is_circular_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Path::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Alignment::InitAsDefaultInstance() {
  ::vg::_Alignment_default_instance_._instance.get_mutable()->path_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->fragment_prev_ = const_cast< ::vg::Alignment*>(
      ::vg::Alignment::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->fragment_next_ = const_cast< ::vg::Alignment*>(
      ::vg::Alignment::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->to_correct_ = const_cast< ::vg::Position*>(
      ::vg::Position::internal_default_instance());
  ::vg::_Alignment_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void Alignment::clear_annotation() {
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Alignment::kSequenceFieldNumber;
const int Alignment::kPathFieldNumber;
const int Alignment::kNameFieldNumber;
const int Alignment::kQualityFieldNumber;
const int Alignment::kMappingQualityFieldNumber;
const int Alignment::kScoreFieldNumber;
const int Alignment::kQueryPositionFieldNumber;
const int Alignment::kSampleNameFieldNumber;
const int Alignment::kReadGroupFieldNumber;
const int Alignment::kFragmentPrevFieldNumber;
const int Alignment::kFragmentNextFieldNumber;
const int Alignment::kIsSecondaryFieldNumber;
const int Alignment::kIdentityFieldNumber;
const int Alignment::kFragmentFieldNumber;
const int Alignment::kLocusFieldNumber;
const int Alignment::kRefposFieldNumber;
const int Alignment::kReadPairedFieldNumber;
const int Alignment::kReadMappedFieldNumber;
const int Alignment::kMateUnmappedFieldNumber;
const int Alignment::kReadOnReverseStrandFieldNumber;
const int Alignment::kMateOnReverseStrandFieldNumber;
const int Alignment::kSoftClippedFieldNumber;
const int Alignment::kDiscordantInsertSizeFieldNumber;
const int Alignment::kUniquenessFieldNumber;
const int Alignment::kCorrectFieldNumber;
const int Alignment::kSecondaryScoreFieldNumber;
const int Alignment::kFragmentScoreFieldNumber;
const int Alignment::kMateMappedToDisjointSubgraphFieldNumber;
const int Alignment::kFragmentLengthDistributionFieldNumber;
const int Alignment::kHaplotypeScoredFieldNumber;
const int Alignment::kHaplotypeLogprobFieldNumber;
const int Alignment::kTimeUsedFieldNumber;
const int Alignment::kToCorrectFieldNumber;
const int Alignment::kCorrectlyMappedFieldNumber;
const int Alignment::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Alignment::Alignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Alignment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Alignment)
}
Alignment::Alignment(const Alignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fragment_(from.fragment_),
      locus_(from.locus_),
      refpos_(from.refpos_),
      secondary_score_(from.secondary_score_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quality().size() > 0) {
    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sample_name().size() > 0) {
    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group().size() > 0) {
    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  fragment_length_distribution_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fragment_length_distribution().size() > 0) {
    fragment_length_distribution_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_length_distribution_);
  }
  if (from.has_path()) {
    path_ = new ::vg::Path(*from.path_);
  } else {
    path_ = NULL;
  }
  if (from.has_fragment_prev()) {
    fragment_prev_ = new ::vg::Alignment(*from.fragment_prev_);
  } else {
    fragment_prev_ = NULL;
  }
  if (from.has_fragment_next()) {
    fragment_next_ = new ::vg::Alignment(*from.fragment_next_);
  } else {
    fragment_next_ = NULL;
  }
  if (from.has_to_correct()) {
    to_correct_ = new ::vg::Position(*from.to_correct_);
  } else {
    to_correct_ = NULL;
  }
  if (from.has_annotation()) {
    annotation_ = new ::google::protobuf::Struct(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  ::memcpy(&mapping_quality_, &from.mapping_quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_used_) -
    reinterpret_cast<char*>(&mapping_quality_)) + sizeof(time_used_));
  // @@protoc_insertion_point(copy_constructor:vg.Alignment)
}

void Alignment::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_length_distribution_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_used_) -
      reinterpret_cast<char*>(&path_)) + sizeof(time_used_));
}

Alignment::~Alignment() {
  // @@protoc_insertion_point(destructor:vg.Alignment)
  SharedDtor();
}

void Alignment::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_length_distribution_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete fragment_prev_;
  if (this != internal_default_instance()) delete fragment_next_;
  if (this != internal_default_instance()) delete to_correct_;
  if (this != internal_default_instance()) delete annotation_;
}

void Alignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Alignment::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Alignment& Alignment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Alignment.base);
  return *internal_default_instance();
}


void Alignment::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Alignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragment_.Clear();
  locus_.Clear();
  refpos_.Clear();
  secondary_score_.Clear();
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fragment_length_distribution_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  if (GetArenaNoVirtual() == NULL && fragment_prev_ != NULL) {
    delete fragment_prev_;
  }
  fragment_prev_ = NULL;
  if (GetArenaNoVirtual() == NULL && fragment_next_ != NULL) {
    delete fragment_next_;
  }
  fragment_next_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_correct_ != NULL) {
    delete to_correct_;
  }
  to_correct_ = NULL;
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
  ::memset(&mapping_quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_used_) -
      reinterpret_cast<char*>(&mapping_quality_)) + sizeof(time_used_));
  _internal_metadata_.Clear();
}

bool Alignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Alignment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Path path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mapping_quality = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 query_position = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &query_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), static_cast<int>(this->sample_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.sample_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group().data(), static_cast<int>(this->read_group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.read_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Alignment fragment_prev = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fragment_prev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Alignment fragment_next = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fragment_next()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_secondary = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_secondary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double identity = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u /* 129 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &identity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Path fragment = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fragment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Locus locus = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_locus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Position refpos = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_refpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_paired = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_paired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_mapped = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_mapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mate_unmapped = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u /* 176 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mate_unmapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool read_on_reverse_strand = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_on_reverse_strand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mate_on_reverse_strand = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u /* 192 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mate_on_reverse_strand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool soft_clipped = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u /* 200 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &soft_clipped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool discordant_insert_size = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 208 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discordant_insert_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double uniqueness = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(217u /* 217 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uniqueness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double correct = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u /* 225 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 secondary_score = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 234 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_secondary_score())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u /* 232 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 234u, input, this->mutable_secondary_score())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double fragment_score = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u /* 241 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fragment_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool mate_mapped_to_disjoint_subgraph = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mate_mapped_to_disjoint_subgraph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fragment_length_distribution = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 258 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fragment_length_distribution()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fragment_length_distribution().data(), static_cast<int>(this->fragment_length_distribution().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Alignment.fragment_length_distribution"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool haplotype_scored = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 264 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haplotype_scored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double haplotype_logprob = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 273 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &haplotype_logprob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double time_used = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 281 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_used_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Position to_correct = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to_correct()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool correctly_mapped = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 296 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &correctly_mapped_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct annotation = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Alignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Alignment)
  return false;
#undef DO_
}

void Alignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Alignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // .vg.Path path = 2;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_path(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // bytes quality = 4;
  if (this->quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->quality(), output);
  }

  // int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mapping_quality(), output);
  }

  // int32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // int32 query_position = 7;
  if (this->query_position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->query_position(), output);
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sample_name(), output);
  }

  // string read_group = 10;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), static_cast<int>(this->read_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->read_group(), output);
  }

  // .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_fragment_prev(), output);
  }

  // .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_fragment_next(), output);
  }

  // bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_secondary(), output);
  }

  // double identity = 16;
  if (this->identity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->identity(), output);
  }

  // repeated .vg.Path fragment = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragment_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->fragment(static_cast<int>(i)),
      output);
  }

  // repeated .vg.Locus locus = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locus_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->locus(static_cast<int>(i)),
      output);
  }

  // repeated .vg.Position refpos = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refpos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->refpos(static_cast<int>(i)),
      output);
  }

  // bool read_paired = 20;
  if (this->read_paired() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->read_paired(), output);
  }

  // bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->read_mapped(), output);
  }

  // bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->mate_unmapped(), output);
  }

  // bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->read_on_reverse_strand(), output);
  }

  // bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->mate_on_reverse_strand(), output);
  }

  // bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->soft_clipped(), output);
  }

  // bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->discordant_insert_size(), output);
  }

  // double uniqueness = 27;
  if (this->uniqueness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->uniqueness(), output);
  }

  // double correct = 28;
  if (this->correct() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->correct(), output);
  }

  // repeated int32 secondary_score = 29;
  if (this->secondary_score_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(29, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _secondary_score_cached_byte_size_));
  }
  for (int i = 0, n = this->secondary_score_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->secondary_score(i), output);
  }

  // double fragment_score = 30;
  if (this->fragment_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->fragment_score(), output);
  }

  // bool mate_mapped_to_disjoint_subgraph = 31;
  if (this->mate_mapped_to_disjoint_subgraph() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->mate_mapped_to_disjoint_subgraph(), output);
  }

  // string fragment_length_distribution = 32;
  if (this->fragment_length_distribution().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fragment_length_distribution().data(), static_cast<int>(this->fragment_length_distribution().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.fragment_length_distribution");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      32, this->fragment_length_distribution(), output);
  }

  // bool haplotype_scored = 33;
  if (this->haplotype_scored() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->haplotype_scored(), output);
  }

  // double haplotype_logprob = 34;
  if (this->haplotype_logprob() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->haplotype_logprob(), output);
  }

  // double time_used = 35;
  if (this->time_used() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->time_used(), output);
  }

  // .vg.Position to_correct = 36;
  if (this->has_to_correct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->_internal_to_correct(), output);
  }

  // bool correctly_mapped = 37;
  if (this->correctly_mapped() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->correctly_mapped(), output);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_annotation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Alignment)
}

::google::protobuf::uint8* Alignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Alignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // .vg.Path path = 2;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_path(), deterministic, target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // bytes quality = 4;
  if (this->quality().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->quality(), target);
  }

  // int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mapping_quality(), target);
  }

  // int32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // int32 query_position = 7;
  if (this->query_position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->query_position(), target);
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sample_name(), target);
  }

  // string read_group = 10;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), static_cast<int>(this->read_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.read_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->read_group(), target);
  }

  // .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_fragment_prev(), deterministic, target);
  }

  // .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_fragment_next(), deterministic, target);
  }

  // bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_secondary(), target);
  }

  // double identity = 16;
  if (this->identity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->identity(), target);
  }

  // repeated .vg.Path fragment = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragment_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->fragment(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.Locus locus = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->locus_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->locus(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.Position refpos = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refpos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->refpos(static_cast<int>(i)), deterministic, target);
  }

  // bool read_paired = 20;
  if (this->read_paired() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->read_paired(), target);
  }

  // bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->read_mapped(), target);
  }

  // bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->mate_unmapped(), target);
  }

  // bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->read_on_reverse_strand(), target);
  }

  // bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->mate_on_reverse_strand(), target);
  }

  // bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->soft_clipped(), target);
  }

  // bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->discordant_insert_size(), target);
  }

  // double uniqueness = 27;
  if (this->uniqueness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->uniqueness(), target);
  }

  // double correct = 28;
  if (this->correct() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->correct(), target);
  }

  // repeated int32 secondary_score = 29;
  if (this->secondary_score_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      29,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _secondary_score_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->secondary_score_, target);
  }

  // double fragment_score = 30;
  if (this->fragment_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->fragment_score(), target);
  }

  // bool mate_mapped_to_disjoint_subgraph = 31;
  if (this->mate_mapped_to_disjoint_subgraph() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->mate_mapped_to_disjoint_subgraph(), target);
  }

  // string fragment_length_distribution = 32;
  if (this->fragment_length_distribution().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fragment_length_distribution().data(), static_cast<int>(this->fragment_length_distribution().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Alignment.fragment_length_distribution");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->fragment_length_distribution(), target);
  }

  // bool haplotype_scored = 33;
  if (this->haplotype_scored() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->haplotype_scored(), target);
  }

  // double haplotype_logprob = 34;
  if (this->haplotype_logprob() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->haplotype_logprob(), target);
  }

  // double time_used = 35;
  if (this->time_used() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->time_used(), target);
  }

  // .vg.Position to_correct = 36;
  if (this->has_to_correct()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        36, this->_internal_to_correct(), deterministic, target);
  }

  // bool correctly_mapped = 37;
  if (this->correctly_mapped() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->correctly_mapped(), target);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_annotation(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Alignment)
  return target;
}

size_t Alignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Alignment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Path fragment = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->fragment_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fragment(static_cast<int>(i)));
    }
  }

  // repeated .vg.Locus locus = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->locus_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->locus(static_cast<int>(i)));
    }
  }

  // repeated .vg.Position refpos = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->refpos_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->refpos(static_cast<int>(i)));
    }
  }

  // repeated int32 secondary_score = 29;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->secondary_score_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _secondary_score_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes quality = 4;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality());
  }

  // string sample_name = 9;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // string read_group = 10;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group());
  }

  // string fragment_length_distribution = 32;
  if (this->fragment_length_distribution().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fragment_length_distribution());
  }

  // .vg.Path path = 2;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .vg.Alignment fragment_prev = 11;
  if (this->has_fragment_prev()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fragment_prev_);
  }

  // .vg.Alignment fragment_next = 12;
  if (this->has_fragment_next()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fragment_next_);
  }

  // .vg.Position to_correct = 36;
  if (this->has_to_correct()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *to_correct_);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // int32 mapping_quality = 5;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  // int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // double identity = 16;
  if (this->identity() != 0) {
    total_size += 2 + 8;
  }

  // int32 query_position = 7;
  if (this->query_position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->query_position());
  }

  // bool is_secondary = 15;
  if (this->is_secondary() != 0) {
    total_size += 1 + 1;
  }

  // bool read_paired = 20;
  if (this->read_paired() != 0) {
    total_size += 2 + 1;
  }

  // bool read_mapped = 21;
  if (this->read_mapped() != 0) {
    total_size += 2 + 1;
  }

  // bool mate_unmapped = 22;
  if (this->mate_unmapped() != 0) {
    total_size += 2 + 1;
  }

  // double uniqueness = 27;
  if (this->uniqueness() != 0) {
    total_size += 2 + 8;
  }

  // double correct = 28;
  if (this->correct() != 0) {
    total_size += 2 + 8;
  }

  // bool read_on_reverse_strand = 23;
  if (this->read_on_reverse_strand() != 0) {
    total_size += 2 + 1;
  }

  // bool mate_on_reverse_strand = 24;
  if (this->mate_on_reverse_strand() != 0) {
    total_size += 2 + 1;
  }

  // bool soft_clipped = 25;
  if (this->soft_clipped() != 0) {
    total_size += 2 + 1;
  }

  // bool discordant_insert_size = 26;
  if (this->discordant_insert_size() != 0) {
    total_size += 2 + 1;
  }

  // bool mate_mapped_to_disjoint_subgraph = 31;
  if (this->mate_mapped_to_disjoint_subgraph() != 0) {
    total_size += 2 + 1;
  }

  // bool haplotype_scored = 33;
  if (this->haplotype_scored() != 0) {
    total_size += 2 + 1;
  }

  // bool correctly_mapped = 37;
  if (this->correctly_mapped() != 0) {
    total_size += 2 + 1;
  }

  // double fragment_score = 30;
  if (this->fragment_score() != 0) {
    total_size += 2 + 8;
  }

  // double haplotype_logprob = 34;
  if (this->haplotype_logprob() != 0) {
    total_size += 2 + 8;
  }

  // double time_used = 35;
  if (this->time_used() != 0) {
    total_size += 2 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Alignment)
  GOOGLE_DCHECK_NE(&from, this);
  const Alignment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Alignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Alignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Alignment)
    MergeFrom(*source);
  }
}

void Alignment::MergeFrom(const Alignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Alignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragment_.MergeFrom(from.fragment_);
  locus_.MergeFrom(from.locus_);
  refpos_.MergeFrom(from.refpos_);
  secondary_score_.MergeFrom(from.secondary_score_);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.quality().size() > 0) {

    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.read_group().size() > 0) {

    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  if (from.fragment_length_distribution().size() > 0) {

    fragment_length_distribution_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fragment_length_distribution_);
  }
  if (from.has_path()) {
    mutable_path()->::vg::Path::MergeFrom(from.path());
  }
  if (from.has_fragment_prev()) {
    mutable_fragment_prev()->::vg::Alignment::MergeFrom(from.fragment_prev());
  }
  if (from.has_fragment_next()) {
    mutable_fragment_next()->::vg::Alignment::MergeFrom(from.fragment_next());
  }
  if (from.has_to_correct()) {
    mutable_to_correct()->::vg::Position::MergeFrom(from.to_correct());
  }
  if (from.has_annotation()) {
    mutable_annotation()->::google::protobuf::Struct::MergeFrom(from.annotation());
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.identity() != 0) {
    set_identity(from.identity());
  }
  if (from.query_position() != 0) {
    set_query_position(from.query_position());
  }
  if (from.is_secondary() != 0) {
    set_is_secondary(from.is_secondary());
  }
  if (from.read_paired() != 0) {
    set_read_paired(from.read_paired());
  }
  if (from.read_mapped() != 0) {
    set_read_mapped(from.read_mapped());
  }
  if (from.mate_unmapped() != 0) {
    set_mate_unmapped(from.mate_unmapped());
  }
  if (from.uniqueness() != 0) {
    set_uniqueness(from.uniqueness());
  }
  if (from.correct() != 0) {
    set_correct(from.correct());
  }
  if (from.read_on_reverse_strand() != 0) {
    set_read_on_reverse_strand(from.read_on_reverse_strand());
  }
  if (from.mate_on_reverse_strand() != 0) {
    set_mate_on_reverse_strand(from.mate_on_reverse_strand());
  }
  if (from.soft_clipped() != 0) {
    set_soft_clipped(from.soft_clipped());
  }
  if (from.discordant_insert_size() != 0) {
    set_discordant_insert_size(from.discordant_insert_size());
  }
  if (from.mate_mapped_to_disjoint_subgraph() != 0) {
    set_mate_mapped_to_disjoint_subgraph(from.mate_mapped_to_disjoint_subgraph());
  }
  if (from.haplotype_scored() != 0) {
    set_haplotype_scored(from.haplotype_scored());
  }
  if (from.correctly_mapped() != 0) {
    set_correctly_mapped(from.correctly_mapped());
  }
  if (from.fragment_score() != 0) {
    set_fragment_score(from.fragment_score());
  }
  if (from.haplotype_logprob() != 0) {
    set_haplotype_logprob(from.haplotype_logprob());
  }
  if (from.time_used() != 0) {
    set_time_used(from.time_used());
  }
}

void Alignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alignment::CopyFrom(const Alignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Alignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alignment::IsInitialized() const {
  return true;
}

void Alignment::Swap(Alignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Alignment::InternalSwap(Alignment* other) {
  using std::swap;
  CastToBase(&fragment_)->InternalSwap(CastToBase(&other->fragment_));
  CastToBase(&locus_)->InternalSwap(CastToBase(&other->locus_));
  CastToBase(&refpos_)->InternalSwap(CastToBase(&other->refpos_));
  secondary_score_.InternalSwap(&other->secondary_score_);
  sequence_.Swap(&other->sequence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_.Swap(&other->quality_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sample_name_.Swap(&other->sample_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  read_group_.Swap(&other->read_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fragment_length_distribution_.Swap(&other->fragment_length_distribution_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(path_, other->path_);
  swap(fragment_prev_, other->fragment_prev_);
  swap(fragment_next_, other->fragment_next_);
  swap(to_correct_, other->to_correct_);
  swap(annotation_, other->annotation_);
  swap(mapping_quality_, other->mapping_quality_);
  swap(score_, other->score_);
  swap(identity_, other->identity_);
  swap(query_position_, other->query_position_);
  swap(is_secondary_, other->is_secondary_);
  swap(read_paired_, other->read_paired_);
  swap(read_mapped_, other->read_mapped_);
  swap(mate_unmapped_, other->mate_unmapped_);
  swap(uniqueness_, other->uniqueness_);
  swap(correct_, other->correct_);
  swap(read_on_reverse_strand_, other->read_on_reverse_strand_);
  swap(mate_on_reverse_strand_, other->mate_on_reverse_strand_);
  swap(soft_clipped_, other->soft_clipped_);
  swap(discordant_insert_size_, other->discordant_insert_size_);
  swap(mate_mapped_to_disjoint_subgraph_, other->mate_mapped_to_disjoint_subgraph_);
  swap(haplotype_scored_, other->haplotype_scored_);
  swap(correctly_mapped_, other->correctly_mapped_);
  swap(fragment_score_, other->fragment_score_);
  swap(haplotype_logprob_, other->haplotype_logprob_);
  swap(time_used_, other->time_used_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Alignment::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MultipathAlignment::InitAsDefaultInstance() {
  ::vg::_MultipathAlignment_default_instance_._instance.get_mutable()->annotation_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void MultipathAlignment::clear_annotation() {
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultipathAlignment::kSequenceFieldNumber;
const int MultipathAlignment::kQualityFieldNumber;
const int MultipathAlignment::kNameFieldNumber;
const int MultipathAlignment::kSampleNameFieldNumber;
const int MultipathAlignment::kReadGroupFieldNumber;
const int MultipathAlignment::kSubpathFieldNumber;
const int MultipathAlignment::kMappingQualityFieldNumber;
const int MultipathAlignment::kStartFieldNumber;
const int MultipathAlignment::kPairedReadNameFieldNumber;
const int MultipathAlignment::kAnnotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultipathAlignment::MultipathAlignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_MultipathAlignment.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.MultipathAlignment)
}
MultipathAlignment::MultipathAlignment(const MultipathAlignment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subpath_(from.subpath_),
      start_(from.start_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.quality().size() > 0) {
    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sample_name().size() > 0) {
    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.read_group().size() > 0) {
    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  paired_read_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.paired_read_name().size() > 0) {
    paired_read_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paired_read_name_);
  }
  if (from.has_annotation()) {
    annotation_ = new ::google::protobuf::Struct(*from.annotation_);
  } else {
    annotation_ = NULL;
  }
  mapping_quality_ = from.mapping_quality_;
  // @@protoc_insertion_point(copy_constructor:vg.MultipathAlignment)
}

void MultipathAlignment::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paired_read_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&annotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mapping_quality_) -
      reinterpret_cast<char*>(&annotation_)) + sizeof(mapping_quality_));
}

MultipathAlignment::~MultipathAlignment() {
  // @@protoc_insertion_point(destructor:vg.MultipathAlignment)
  SharedDtor();
}

void MultipathAlignment::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paired_read_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete annotation_;
}

void MultipathAlignment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MultipathAlignment::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MultipathAlignment& MultipathAlignment::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_MultipathAlignment.base);
  return *internal_default_instance();
}


void MultipathAlignment::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.MultipathAlignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subpath_.Clear();
  start_.Clear();
  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quality_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sample_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  read_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paired_read_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && annotation_ != NULL) {
    delete annotation_;
  }
  annotation_ = NULL;
  mapping_quality_ = 0;
  _internal_metadata_.Clear();
}

bool MultipathAlignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.MultipathAlignment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_quality()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sample_name = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sample_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sample_name().data(), static_cast<int>(this->sample_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.sample_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string read_group = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_read_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->read_group().data(), static_cast<int>(this->read_group().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.read_group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Subpath subpath = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_subpath()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mapping_quality = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapping_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 start = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_start())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_start())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string paired_read_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paired_read_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->paired_read_name().data(), static_cast<int>(this->paired_read_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.MultipathAlignment.paired_read_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct annotation = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_annotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.MultipathAlignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.MultipathAlignment)
  return false;
#undef DO_
}

void MultipathAlignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.MultipathAlignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // bytes quality = 2;
  if (this->quality().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->quality(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // string sample_name = 4;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sample_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sample_name(), output);
  }

  // string read_group = 5;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), static_cast<int>(this->read_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.read_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->read_group(), output);
  }

  // repeated .vg.Subpath subpath = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subpath_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->subpath(static_cast<int>(i)),
      output);
  }

  // int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mapping_quality(), output);
  }

  // repeated uint32 start = 8;
  if (this->start_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _start_cached_byte_size_));
  }
  for (int i = 0, n = this->start_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->start(i), output);
  }

  // string paired_read_name = 9;
  if (this->paired_read_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paired_read_name().data(), static_cast<int>(this->paired_read_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.paired_read_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->paired_read_name(), output);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->_internal_annotation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.MultipathAlignment)
}

::google::protobuf::uint8* MultipathAlignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.MultipathAlignment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // bytes quality = 2;
  if (this->quality().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->quality(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // string sample_name = 4;
  if (this->sample_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sample_name().data(), static_cast<int>(this->sample_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.sample_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sample_name(), target);
  }

  // string read_group = 5;
  if (this->read_group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->read_group().data(), static_cast<int>(this->read_group().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.read_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->read_group(), target);
  }

  // repeated .vg.Subpath subpath = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subpath_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->subpath(static_cast<int>(i)), deterministic, target);
  }

  // int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mapping_quality(), target);
  }

  // repeated uint32 start = 8;
  if (this->start_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _start_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->start_, target);
  }

  // string paired_read_name = 9;
  if (this->paired_read_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->paired_read_name().data(), static_cast<int>(this->paired_read_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.MultipathAlignment.paired_read_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->paired_read_name(), target);
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->_internal_annotation(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.MultipathAlignment)
  return target;
}

size_t MultipathAlignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.MultipathAlignment)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Subpath subpath = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->subpath_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subpath(static_cast<int>(i)));
    }
  }

  // repeated uint32 start = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->start_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _start_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // bytes quality = 2;
  if (this->quality().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->quality());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string sample_name = 4;
  if (this->sample_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sample_name());
  }

  // string read_group = 5;
  if (this->read_group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->read_group());
  }

  // string paired_read_name = 9;
  if (this->paired_read_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paired_read_name());
  }

  // .google.protobuf.Struct annotation = 100;
  if (this->has_annotation()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *annotation_);
  }

  // int32 mapping_quality = 7;
  if (this->mapping_quality() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mapping_quality());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipathAlignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.MultipathAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  const MultipathAlignment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MultipathAlignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.MultipathAlignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.MultipathAlignment)
    MergeFrom(*source);
  }
}

void MultipathAlignment::MergeFrom(const MultipathAlignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.MultipathAlignment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subpath_.MergeFrom(from.subpath_);
  start_.MergeFrom(from.start_);
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.quality().size() > 0) {

    quality_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.quality_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.sample_name().size() > 0) {

    sample_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sample_name_);
  }
  if (from.read_group().size() > 0) {

    read_group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.read_group_);
  }
  if (from.paired_read_name().size() > 0) {

    paired_read_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paired_read_name_);
  }
  if (from.has_annotation()) {
    mutable_annotation()->::google::protobuf::Struct::MergeFrom(from.annotation());
  }
  if (from.mapping_quality() != 0) {
    set_mapping_quality(from.mapping_quality());
  }
}

void MultipathAlignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.MultipathAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultipathAlignment::CopyFrom(const MultipathAlignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.MultipathAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipathAlignment::IsInitialized() const {
  return true;
}

void MultipathAlignment::Swap(MultipathAlignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultipathAlignment::InternalSwap(MultipathAlignment* other) {
  using std::swap;
  CastToBase(&subpath_)->InternalSwap(CastToBase(&other->subpath_));
  start_.InternalSwap(&other->start_);
  sequence_.Swap(&other->sequence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  quality_.Swap(&other->quality_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sample_name_.Swap(&other->sample_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  read_group_.Swap(&other->read_group_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paired_read_name_.Swap(&other->paired_read_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(annotation_, other->annotation_);
  swap(mapping_quality_, other->mapping_quality_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MultipathAlignment::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Subpath::InitAsDefaultInstance() {
  ::vg::_Subpath_default_instance_._instance.get_mutable()->path_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subpath::kPathFieldNumber;
const int Subpath::kNextFieldNumber;
const int Subpath::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subpath::Subpath()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Subpath.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Subpath)
}
Subpath::Subpath(const Subpath& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      next_(from.next_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_path()) {
    path_ = new ::vg::Path(*from.path_);
  } else {
    path_ = NULL;
  }
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:vg.Subpath)
}

void Subpath::SharedCtor() {
  ::memset(&path_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&path_)) + sizeof(score_));
}

Subpath::~Subpath() {
  // @@protoc_insertion_point(destructor:vg.Subpath)
  SharedDtor();
}

void Subpath::SharedDtor() {
  if (this != internal_default_instance()) delete path_;
}

void Subpath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Subpath::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subpath& Subpath::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Subpath.base);
  return *internal_default_instance();
}


void Subpath::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Subpath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_.Clear();
  if (GetArenaNoVirtual() == NULL && path_ != NULL) {
    delete path_;
  }
  path_ = NULL;
  score_ = 0;
  _internal_metadata_.Clear();
}

bool Subpath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Subpath)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vg.Path path = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 next = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_next())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_next())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Subpath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Subpath)
  return false;
#undef DO_
}

void Subpath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Subpath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Path path = 1;
  if (this->has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_path(), output);
  }

  // repeated uint32 next = 2;
  if (this->next_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _next_cached_byte_size_));
  }
  for (int i = 0, n = this->next_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->next(i), output);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Subpath)
}

::google::protobuf::uint8* Subpath::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Subpath)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Path path = 1;
  if (this->has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_path(), deterministic, target);
  }

  // repeated uint32 next = 2;
  if (this->next_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _next_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->next_, target);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Subpath)
  return target;
}

size_t Subpath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Subpath)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 next = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->next_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _next_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .vg.Path path = 1;
  if (this->has_path()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // int32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subpath::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Subpath)
  GOOGLE_DCHECK_NE(&from, this);
  const Subpath* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subpath>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Subpath)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Subpath)
    MergeFrom(*source);
  }
}

void Subpath::MergeFrom(const Subpath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Subpath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_.MergeFrom(from.next_);
  if (from.has_path()) {
    mutable_path()->::vg::Path::MergeFrom(from.path());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void Subpath::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subpath::CopyFrom(const Subpath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Subpath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subpath::IsInitialized() const {
  return true;
}

void Subpath::Swap(Subpath* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subpath::InternalSwap(Subpath* other) {
  using std::swap;
  next_.InternalSwap(&other->next_);
  swap(path_, other->path_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Subpath::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KmerMatch::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KmerMatch::kSequenceFieldNumber;
const int KmerMatch::kNodeIdFieldNumber;
const int KmerMatch::kPositionFieldNumber;
const int KmerMatch::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KmerMatch::KmerMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_KmerMatch.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.KmerMatch)
}
KmerMatch::KmerMatch(const KmerMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sequence().size() > 0) {
    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  // @@protoc_insertion_point(copy_constructor:vg.KmerMatch)
}

void KmerMatch::SharedCtor() {
  sequence_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
}

KmerMatch::~KmerMatch() {
  // @@protoc_insertion_point(destructor:vg.KmerMatch)
  SharedDtor();
}

void KmerMatch::SharedDtor() {
  sequence_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KmerMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KmerMatch::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KmerMatch& KmerMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_KmerMatch.base);
  return *internal_default_instance();
}


void KmerMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.KmerMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  _internal_metadata_.Clear();
}

bool KmerMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.KmerMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string sequence = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.KmerMatch.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sint32 position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool backward = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.KmerMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.KmerMatch)
  return false;
#undef DO_
}

void KmerMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.KmerMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sequence(), output);
  }

  // int64 node_id = 2;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->node_id(), output);
  }

  // sint32 position = 3;
  if (this->position() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->position(), output);
  }

  // bool backward = 4;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->backward(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.KmerMatch)
}

::google::protobuf::uint8* KmerMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.KmerMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sequence = 1;
  if (this->sequence().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.KmerMatch.sequence");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sequence(), target);
  }

  // int64 node_id = 2;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->node_id(), target);
  }

  // sint32 position = 3;
  if (this->position() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->position(), target);
  }

  // bool backward = 4;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->backward(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.KmerMatch)
  return target;
}

size_t KmerMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.KmerMatch)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string sequence = 1;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // int64 node_id = 2;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // sint32 position = 3;
  if (this->position() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->position());
  }

  // bool backward = 4;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KmerMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.KmerMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const KmerMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KmerMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.KmerMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.KmerMatch)
    MergeFrom(*source);
  }
}

void KmerMatch::MergeFrom(const KmerMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.KmerMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.position() != 0) {
    set_position(from.position());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void KmerMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.KmerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KmerMatch::CopyFrom(const KmerMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.KmerMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KmerMatch::IsInitialized() const {
  return true;
}

void KmerMatch::Swap(KmerMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KmerMatch::InternalSwap(KmerMatch* other) {
  using std::swap;
  sequence_.Swap(&other->sequence_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(position_, other->position_);
  swap(backward_, other->backward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KmerMatch::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BasePileup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasePileup::kRefBaseFieldNumber;
const int BasePileup::kNumBasesFieldNumber;
const int BasePileup::kBasesFieldNumber;
const int BasePileup::kQualitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasePileup::BasePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_BasePileup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.BasePileup)
}
BasePileup::BasePileup(const BasePileup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bases().size() > 0) {
    bases_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bases_);
  }
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qualities().size() > 0) {
    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
  ::memcpy(&ref_base_, &from.ref_base_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_bases_) -
    reinterpret_cast<char*>(&ref_base_)) + sizeof(num_bases_));
  // @@protoc_insertion_point(copy_constructor:vg.BasePileup)
}

void BasePileup::SharedCtor() {
  bases_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bases_) -
      reinterpret_cast<char*>(&ref_base_)) + sizeof(num_bases_));
}

BasePileup::~BasePileup() {
  // @@protoc_insertion_point(destructor:vg.BasePileup)
  SharedDtor();
}

void BasePileup::SharedDtor() {
  bases_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BasePileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BasePileup::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BasePileup& BasePileup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_BasePileup.base);
  return *internal_default_instance();
}


void BasePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.BasePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bases_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_bases_) -
      reinterpret_cast<char*>(&ref_base_)) + sizeof(num_bases_));
  _internal_metadata_.Clear();
}

bool BasePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.BasePileup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ref_base = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ref_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_bases = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_bases_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string bases = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bases()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bases().data(), static_cast<int>(this->bases().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.BasePileup.bases"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes qualities = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.BasePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.BasePileup)
  return false;
#undef DO_
}

void BasePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.BasePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ref_base = 1;
  if (this->ref_base() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ref_base(), output);
  }

  // int32 num_bases = 2;
  if (this->num_bases() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_bases(), output);
  }

  // string bases = 3;
  if (this->bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), static_cast<int>(this->bases().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bases(), output);
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->qualities(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.BasePileup)
}

::google::protobuf::uint8* BasePileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.BasePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ref_base = 1;
  if (this->ref_base() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ref_base(), target);
  }

  // int32 num_bases = 2;
  if (this->num_bases() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_bases(), target);
  }

  // string bases = 3;
  if (this->bases().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bases().data(), static_cast<int>(this->bases().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.BasePileup.bases");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bases(), target);
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->qualities(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.BasePileup)
  return target;
}

size_t BasePileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.BasePileup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bases = 3;
  if (this->bases().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bases());
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->qualities());
  }

  // int32 ref_base = 1;
  if (this->ref_base() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ref_base());
  }

  // int32 num_bases = 2;
  if (this->num_bases() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_bases());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasePileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.BasePileup)
  GOOGLE_DCHECK_NE(&from, this);
  const BasePileup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BasePileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.BasePileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.BasePileup)
    MergeFrom(*source);
  }
}

void BasePileup::MergeFrom(const BasePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.BasePileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bases().size() > 0) {

    bases_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bases_);
  }
  if (from.qualities().size() > 0) {

    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
  if (from.ref_base() != 0) {
    set_ref_base(from.ref_base());
  }
  if (from.num_bases() != 0) {
    set_num_bases(from.num_bases());
  }
}

void BasePileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.BasePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasePileup::CopyFrom(const BasePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.BasePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasePileup::IsInitialized() const {
  return true;
}

void BasePileup::Swap(BasePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasePileup::InternalSwap(BasePileup* other) {
  using std::swap;
  bases_.Swap(&other->bases_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  qualities_.Swap(&other->qualities_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_base_, other->ref_base_);
  swap(num_bases_, other->num_bases_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BasePileup::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodePileup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodePileup::kNodeIdFieldNumber;
const int NodePileup::kBasePileupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodePileup::NodePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_NodePileup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.NodePileup)
}
NodePileup::NodePileup(const NodePileup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      base_pileup_(from.base_pileup_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:vg.NodePileup)
}

void NodePileup::SharedCtor() {
  node_id_ = GOOGLE_LONGLONG(0);
}

NodePileup::~NodePileup() {
  // @@protoc_insertion_point(destructor:vg.NodePileup)
  SharedDtor();
}

void NodePileup::SharedDtor() {
}

void NodePileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodePileup::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodePileup& NodePileup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_NodePileup.base);
  return *internal_default_instance();
}


void NodePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.NodePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_pileup_.Clear();
  node_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool NodePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.NodePileup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.BasePileup base_pileup = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_base_pileup()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.NodePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.NodePileup)
  return false;
#undef DO_
}

void NodePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.NodePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->base_pileup_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->base_pileup(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.NodePileup)
}

::google::protobuf::uint8* NodePileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.NodePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // repeated .vg.BasePileup base_pileup = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->base_pileup_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->base_pileup(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.NodePileup)
  return target;
}

size_t NodePileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.NodePileup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.BasePileup base_pileup = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->base_pileup_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->base_pileup(static_cast<int>(i)));
    }
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodePileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.NodePileup)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePileup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodePileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.NodePileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.NodePileup)
    MergeFrom(*source);
  }
}

void NodePileup::MergeFrom(const NodePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.NodePileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  base_pileup_.MergeFrom(from.base_pileup_);
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
}

void NodePileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.NodePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePileup::CopyFrom(const NodePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.NodePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePileup::IsInitialized() const {
  return true;
}

void NodePileup::Swap(NodePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodePileup::InternalSwap(NodePileup* other) {
  using std::swap;
  CastToBase(&base_pileup_)->InternalSwap(CastToBase(&other->base_pileup_));
  swap(node_id_, other->node_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodePileup::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EdgePileup::InitAsDefaultInstance() {
  ::vg::_EdgePileup_default_instance_._instance.get_mutable()->edge_ = const_cast< ::vg::Edge*>(
      ::vg::Edge::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EdgePileup::kEdgeFieldNumber;
const int EdgePileup::kNumReadsFieldNumber;
const int EdgePileup::kNumForwardReadsFieldNumber;
const int EdgePileup::kQualitiesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EdgePileup::EdgePileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_EdgePileup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.EdgePileup)
}
EdgePileup::EdgePileup(const EdgePileup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.qualities().size() > 0) {
    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
  if (from.has_edge()) {
    edge_ = new ::vg::Edge(*from.edge_);
  } else {
    edge_ = NULL;
  }
  ::memcpy(&num_reads_, &from.num_reads_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_forward_reads_) -
    reinterpret_cast<char*>(&num_reads_)) + sizeof(num_forward_reads_));
  // @@protoc_insertion_point(copy_constructor:vg.EdgePileup)
}

void EdgePileup::SharedCtor() {
  qualities_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&edge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_forward_reads_) -
      reinterpret_cast<char*>(&edge_)) + sizeof(num_forward_reads_));
}

EdgePileup::~EdgePileup() {
  // @@protoc_insertion_point(destructor:vg.EdgePileup)
  SharedDtor();
}

void EdgePileup::SharedDtor() {
  qualities_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete edge_;
}

void EdgePileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EdgePileup::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EdgePileup& EdgePileup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_EdgePileup.base);
  return *internal_default_instance();
}


void EdgePileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.EdgePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qualities_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && edge_ != NULL) {
    delete edge_;
  }
  edge_ = NULL;
  ::memset(&num_reads_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_forward_reads_) -
      reinterpret_cast<char*>(&num_reads_)) + sizeof(num_forward_reads_));
  _internal_metadata_.Clear();
}

bool EdgePileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.EdgePileup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vg.Edge edge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_reads = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 num_forward_reads = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_forward_reads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes qualities = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_qualities()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.EdgePileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.EdgePileup)
  return false;
#undef DO_
}

void EdgePileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.EdgePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Edge edge = 1;
  if (this->has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_edge(), output);
  }

  // int32 num_reads = 2;
  if (this->num_reads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_reads(), output);
  }

  // int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_forward_reads(), output);
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->qualities(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.EdgePileup)
}

::google::protobuf::uint8* EdgePileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.EdgePileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Edge edge = 1;
  if (this->has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_edge(), deterministic, target);
  }

  // int32 num_reads = 2;
  if (this->num_reads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_reads(), target);
  }

  // int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_forward_reads(), target);
  }

  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->qualities(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.EdgePileup)
  return target;
}

size_t EdgePileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.EdgePileup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes qualities = 4;
  if (this->qualities().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->qualities());
  }

  // .vg.Edge edge = 1;
  if (this->has_edge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *edge_);
  }

  // int32 num_reads = 2;
  if (this->num_reads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_reads());
  }

  // int32 num_forward_reads = 3;
  if (this->num_forward_reads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_forward_reads());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgePileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.EdgePileup)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgePileup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EdgePileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.EdgePileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.EdgePileup)
    MergeFrom(*source);
  }
}

void EdgePileup::MergeFrom(const EdgePileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.EdgePileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.qualities().size() > 0) {

    qualities_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qualities_);
  }
  if (from.has_edge()) {
    mutable_edge()->::vg::Edge::MergeFrom(from.edge());
  }
  if (from.num_reads() != 0) {
    set_num_reads(from.num_reads());
  }
  if (from.num_forward_reads() != 0) {
    set_num_forward_reads(from.num_forward_reads());
  }
}

void EdgePileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.EdgePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgePileup::CopyFrom(const EdgePileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.EdgePileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePileup::IsInitialized() const {
  return true;
}

void EdgePileup::Swap(EdgePileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EdgePileup::InternalSwap(EdgePileup* other) {
  using std::swap;
  qualities_.Swap(&other->qualities_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(edge_, other->edge_);
  swap(num_reads_, other->num_reads_);
  swap(num_forward_reads_, other->num_forward_reads_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EdgePileup::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pileup::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pileup::kNodePileupsFieldNumber;
const int Pileup::kEdgePileupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pileup::Pileup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Pileup.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Pileup)
}
Pileup::Pileup(const Pileup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      node_pileups_(from.node_pileups_),
      edge_pileups_(from.edge_pileups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vg.Pileup)
}

void Pileup::SharedCtor() {
}

Pileup::~Pileup() {
  // @@protoc_insertion_point(destructor:vg.Pileup)
  SharedDtor();
}

void Pileup::SharedDtor() {
}

void Pileup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Pileup::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pileup& Pileup::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Pileup.base);
  return *internal_default_instance();
}


void Pileup::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Pileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_pileups_.Clear();
  edge_pileups_.Clear();
  _internal_metadata_.Clear();
}

bool Pileup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Pileup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.NodePileup node_pileups = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_pileups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.EdgePileup edge_pileups = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_edge_pileups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Pileup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Pileup)
  return false;
#undef DO_
}

void Pileup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Pileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.NodePileup node_pileups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_pileups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_pileups(static_cast<int>(i)),
      output);
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_pileups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->edge_pileups(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Pileup)
}

::google::protobuf::uint8* Pileup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Pileup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.NodePileup node_pileups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_pileups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_pileups(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->edge_pileups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->edge_pileups(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Pileup)
  return target;
}

size_t Pileup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Pileup)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.NodePileup node_pileups = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_pileups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_pileups(static_cast<int>(i)));
    }
  }

  // repeated .vg.EdgePileup edge_pileups = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->edge_pileups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->edge_pileups(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pileup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Pileup)
  GOOGLE_DCHECK_NE(&from, this);
  const Pileup* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pileup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Pileup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Pileup)
    MergeFrom(*source);
  }
}

void Pileup::MergeFrom(const Pileup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Pileup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_pileups_.MergeFrom(from.node_pileups_);
  edge_pileups_.MergeFrom(from.edge_pileups_);
}

void Pileup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Pileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pileup::CopyFrom(const Pileup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Pileup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pileup::IsInitialized() const {
  return true;
}

void Pileup::Swap(Pileup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pileup::InternalSwap(Pileup* other) {
  using std::swap;
  CastToBase(&node_pileups_)->InternalSwap(CastToBase(&other->node_pileups_));
  CastToBase(&edge_pileups_)->InternalSwap(CastToBase(&other->edge_pileups_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Pileup::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Snarl::InitAsDefaultInstance() {
  ::vg::_Snarl_default_instance_._instance.get_mutable()->start_ = const_cast< ::vg::Visit*>(
      ::vg::Visit::internal_default_instance());
  ::vg::_Snarl_default_instance_._instance.get_mutable()->end_ = const_cast< ::vg::Visit*>(
      ::vg::Visit::internal_default_instance());
  ::vg::_Snarl_default_instance_._instance.get_mutable()->parent_ = const_cast< ::vg::Snarl*>(
      ::vg::Snarl::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snarl::kTypeFieldNumber;
const int Snarl::kStartFieldNumber;
const int Snarl::kEndFieldNumber;
const int Snarl::kParentFieldNumber;
const int Snarl::kNameFieldNumber;
const int Snarl::kStartSelfReachableFieldNumber;
const int Snarl::kEndSelfReachableFieldNumber;
const int Snarl::kStartEndReachableFieldNumber;
const int Snarl::kDirectedAcyclicNetGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snarl::Snarl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Snarl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Snarl)
}
Snarl::Snarl(const Snarl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_start()) {
    start_ = new ::vg::Visit(*from.start_);
  } else {
    start_ = NULL;
  }
  if (from.has_end()) {
    end_ = new ::vg::Visit(*from.end_);
  } else {
    end_ = NULL;
  }
  if (from.has_parent()) {
    parent_ = new ::vg::Snarl(*from.parent_);
  } else {
    parent_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&directed_acyclic_net_graph_) -
    reinterpret_cast<char*>(&type_)) + sizeof(directed_acyclic_net_graph_));
  // @@protoc_insertion_point(copy_constructor:vg.Snarl)
}

void Snarl::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&directed_acyclic_net_graph_) -
      reinterpret_cast<char*>(&start_)) + sizeof(directed_acyclic_net_graph_));
}

Snarl::~Snarl() {
  // @@protoc_insertion_point(destructor:vg.Snarl)
  SharedDtor();
}

void Snarl::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
  if (this != internal_default_instance()) delete parent_;
}

void Snarl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Snarl::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snarl& Snarl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Snarl.base);
  return *internal_default_instance();
}


void Snarl::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Snarl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
  if (GetArenaNoVirtual() == NULL && end_ != NULL) {
    delete end_;
  }
  end_ = NULL;
  if (GetArenaNoVirtual() == NULL && parent_ != NULL) {
    delete parent_;
  }
  parent_ = NULL;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&directed_acyclic_net_graph_) -
      reinterpret_cast<char*>(&type_)) + sizeof(directed_acyclic_net_graph_));
  _internal_metadata_.Clear();
}

bool Snarl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Snarl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vg.SnarlType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::vg::SnarlType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Visit start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Visit end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Snarl parent = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Snarl.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool start_self_reachable = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_self_reachable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool end_self_reachable = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_self_reachable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool start_end_reachable = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_end_reachable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool directed_acyclic_net_graph = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directed_acyclic_net_graph_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Snarl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Snarl)
  return false;
#undef DO_
}

void Snarl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Snarl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.SnarlType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .vg.Visit start = 2;
  if (this->has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_start(), output);
  }

  // .vg.Visit end = 3;
  if (this->has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_end(), output);
  }

  // .vg.Snarl parent = 4;
  if (this->has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_parent(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Snarl.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // bool start_self_reachable = 6;
  if (this->start_self_reachable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->start_self_reachable(), output);
  }

  // bool end_self_reachable = 7;
  if (this->end_self_reachable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->end_self_reachable(), output);
  }

  // bool start_end_reachable = 8;
  if (this->start_end_reachable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->start_end_reachable(), output);
  }

  // bool directed_acyclic_net_graph = 9;
  if (this->directed_acyclic_net_graph() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->directed_acyclic_net_graph(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Snarl)
}

::google::protobuf::uint8* Snarl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Snarl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.SnarlType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .vg.Visit start = 2;
  if (this->has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_start(), deterministic, target);
  }

  // .vg.Visit end = 3;
  if (this->has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_end(), deterministic, target);
  }

  // .vg.Snarl parent = 4;
  if (this->has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_parent(), deterministic, target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Snarl.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // bool start_self_reachable = 6;
  if (this->start_self_reachable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->start_self_reachable(), target);
  }

  // bool end_self_reachable = 7;
  if (this->end_self_reachable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->end_self_reachable(), target);
  }

  // bool start_end_reachable = 8;
  if (this->start_end_reachable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->start_end_reachable(), target);
  }

  // bool directed_acyclic_net_graph = 9;
  if (this->directed_acyclic_net_graph() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->directed_acyclic_net_graph(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Snarl)
  return target;
}

size_t Snarl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Snarl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .vg.Visit start = 2;
  if (this->has_start()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .vg.Visit end = 3;
  if (this->has_end()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *end_);
  }

  // .vg.Snarl parent = 4;
  if (this->has_parent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parent_);
  }

  // .vg.SnarlType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool start_self_reachable = 6;
  if (this->start_self_reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool end_self_reachable = 7;
  if (this->end_self_reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool start_end_reachable = 8;
  if (this->start_end_reachable() != 0) {
    total_size += 1 + 1;
  }

  // bool directed_acyclic_net_graph = 9;
  if (this->directed_acyclic_net_graph() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snarl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Snarl)
  GOOGLE_DCHECK_NE(&from, this);
  const Snarl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snarl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Snarl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Snarl)
    MergeFrom(*source);
  }
}

void Snarl::MergeFrom(const Snarl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Snarl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_start()) {
    mutable_start()->::vg::Visit::MergeFrom(from.start());
  }
  if (from.has_end()) {
    mutable_end()->::vg::Visit::MergeFrom(from.end());
  }
  if (from.has_parent()) {
    mutable_parent()->::vg::Snarl::MergeFrom(from.parent());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.start_self_reachable() != 0) {
    set_start_self_reachable(from.start_self_reachable());
  }
  if (from.end_self_reachable() != 0) {
    set_end_self_reachable(from.end_self_reachable());
  }
  if (from.start_end_reachable() != 0) {
    set_start_end_reachable(from.start_end_reachable());
  }
  if (from.directed_acyclic_net_graph() != 0) {
    set_directed_acyclic_net_graph(from.directed_acyclic_net_graph());
  }
}

void Snarl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Snarl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snarl::CopyFrom(const Snarl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Snarl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snarl::IsInitialized() const {
  return true;
}

void Snarl::Swap(Snarl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snarl::InternalSwap(Snarl* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_, other->start_);
  swap(end_, other->end_);
  swap(parent_, other->parent_);
  swap(type_, other->type_);
  swap(start_self_reachable_, other->start_self_reachable_);
  swap(end_self_reachable_, other->end_self_reachable_);
  swap(start_end_reachable_, other->start_end_reachable_);
  swap(directed_acyclic_net_graph_, other->directed_acyclic_net_graph_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Snarl::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Visit::InitAsDefaultInstance() {
  ::vg::_Visit_default_instance_._instance.get_mutable()->snarl_ = const_cast< ::vg::Snarl*>(
      ::vg::Snarl::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Visit::kNodeIdFieldNumber;
const int Visit::kSnarlFieldNumber;
const int Visit::kBackwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Visit::Visit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Snarl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Visit)
}
Visit::Visit(const Visit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snarl()) {
    snarl_ = new ::vg::Snarl(*from.snarl_);
  } else {
    snarl_ = NULL;
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&backward_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  // @@protoc_insertion_point(copy_constructor:vg.Visit)
}

void Visit::SharedCtor() {
  ::memset(&snarl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&snarl_)) + sizeof(backward_));
}

Visit::~Visit() {
  // @@protoc_insertion_point(destructor:vg.Visit)
  SharedDtor();
}

void Visit::SharedDtor() {
  if (this != internal_default_instance()) delete snarl_;
}

void Visit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Visit::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Visit& Visit::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Snarl.base);
  return *internal_default_instance();
}


void Visit::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Visit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && snarl_ != NULL) {
    delete snarl_;
  }
  snarl_ = NULL;
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&backward_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(backward_));
  _internal_metadata_.Clear();
}

bool Visit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Visit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Snarl snarl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snarl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool backward = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Visit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Visit)
  return false;
#undef DO_
}

void Visit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Visit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->node_id(), output);
  }

  // .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_snarl(), output);
  }

  // bool backward = 3;
  if (this->backward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->backward(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Visit)
}

::google::protobuf::uint8* Visit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Visit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->node_id(), target);
  }

  // .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_snarl(), deterministic, target);
  }

  // bool backward = 3;
  if (this->backward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->backward(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Visit)
  return target;
}

size_t Visit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Visit)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vg.Snarl snarl = 2;
  if (this->has_snarl()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *snarl_);
  }

  // int64 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->node_id());
  }

  // bool backward = 3;
  if (this->backward() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Visit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Visit)
  GOOGLE_DCHECK_NE(&from, this);
  const Visit* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Visit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Visit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Visit)
    MergeFrom(*source);
  }
}

void Visit::MergeFrom(const Visit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Visit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snarl()) {
    mutable_snarl()->::vg::Snarl::MergeFrom(from.snarl());
  }
  if (from.node_id() != 0) {
    set_node_id(from.node_id());
  }
  if (from.backward() != 0) {
    set_backward(from.backward());
  }
}

void Visit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Visit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Visit::CopyFrom(const Visit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Visit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Visit::IsInitialized() const {
  return true;
}

void Visit::Swap(Visit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Visit::InternalSwap(Visit* other) {
  using std::swap;
  swap(snarl_, other->snarl_);
  swap(node_id_, other->node_id_);
  swap(backward_, other->backward_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Visit::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SnarlTraversal::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SnarlTraversal::kVisitFieldNumber;
const int SnarlTraversal::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SnarlTraversal::SnarlTraversal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_SnarlTraversal.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.SnarlTraversal)
}
SnarlTraversal::SnarlTraversal(const SnarlTraversal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      visit_(from.visit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:vg.SnarlTraversal)
}

void SnarlTraversal::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SnarlTraversal::~SnarlTraversal() {
  // @@protoc_insertion_point(destructor:vg.SnarlTraversal)
  SharedDtor();
}

void SnarlTraversal::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SnarlTraversal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SnarlTraversal::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SnarlTraversal& SnarlTraversal::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_SnarlTraversal.base);
  return *internal_default_instance();
}


void SnarlTraversal::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.SnarlTraversal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visit_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SnarlTraversal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.SnarlTraversal)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vg.Visit visit = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_visit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.SnarlTraversal.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.SnarlTraversal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.SnarlTraversal)
  return false;
#undef DO_
}

void SnarlTraversal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.SnarlTraversal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.Visit visit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visit_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->visit(static_cast<int>(i)),
      output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.SnarlTraversal.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.SnarlTraversal)
}

::google::protobuf::uint8* SnarlTraversal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.SnarlTraversal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .vg.Visit visit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->visit_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->visit(static_cast<int>(i)), deterministic, target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.SnarlTraversal.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.SnarlTraversal)
  return target;
}

size_t SnarlTraversal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.SnarlTraversal)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Visit visit = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->visit_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->visit(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SnarlTraversal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.SnarlTraversal)
  GOOGLE_DCHECK_NE(&from, this);
  const SnarlTraversal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SnarlTraversal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.SnarlTraversal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.SnarlTraversal)
    MergeFrom(*source);
  }
}

void SnarlTraversal::MergeFrom(const SnarlTraversal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.SnarlTraversal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  visit_.MergeFrom(from.visit_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SnarlTraversal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.SnarlTraversal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SnarlTraversal::CopyFrom(const SnarlTraversal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.SnarlTraversal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnarlTraversal::IsInitialized() const {
  return true;
}

void SnarlTraversal::Swap(SnarlTraversal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SnarlTraversal::InternalSwap(SnarlTraversal* other) {
  using std::swap;
  CastToBase(&visit_)->InternalSwap(CastToBase(&other->visit_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SnarlTraversal::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Locus::InitAsDefaultInstance() {
  ::vg::_Locus_default_instance_._instance.get_mutable()->overall_support_ = const_cast< ::vg::Support*>(
      ::vg::Support::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Locus::kNameFieldNumber;
const int Locus::kAlleleFieldNumber;
const int Locus::kSupportFieldNumber;
const int Locus::kGenotypeFieldNumber;
const int Locus::kOverallSupportFieldNumber;
const int Locus::kAlleleLogLikelihoodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Locus::Locus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Locus.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Locus)
}
Locus::Locus(const Locus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allele_(from.allele_),
      support_(from.support_),
      genotype_(from.genotype_),
      allele_log_likelihood_(from.allele_log_likelihood_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_overall_support()) {
    overall_support_ = new ::vg::Support(*from.overall_support_);
  } else {
    overall_support_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vg.Locus)
}

void Locus::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overall_support_ = NULL;
}

Locus::~Locus() {
  // @@protoc_insertion_point(destructor:vg.Locus)
  SharedDtor();
}

void Locus::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overall_support_;
}

void Locus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Locus::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Locus& Locus::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Locus.base);
  return *internal_default_instance();
}


void Locus::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Locus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allele_.Clear();
  support_.Clear();
  genotype_.Clear();
  allele_log_likelihood_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && overall_support_ != NULL) {
    delete overall_support_;
  }
  overall_support_ = NULL;
  _internal_metadata_.Clear();
}

bool Locus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Locus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "vg.Locus.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Path allele = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_allele()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Support support = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .vg.Genotype genotype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_genotype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Support overall_support = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_overall_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double allele_log_likelihood = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_allele_log_likelihood())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 50u, input, this->mutable_allele_log_likelihood())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Locus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Locus)
  return false;
#undef DO_
}

void Locus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Locus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Locus.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .vg.Path allele = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allele_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->allele(static_cast<int>(i)),
      output);
  }

  // repeated .vg.Support support = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->support_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->support(static_cast<int>(i)),
      output);
  }

  // repeated .vg.Genotype genotype = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->genotype_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->genotype(static_cast<int>(i)),
      output);
  }

  // .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_overall_support(), output);
  }

  // repeated double allele_log_likelihood = 6;
  if (this->allele_log_likelihood_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allele_log_likelihood_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->allele_log_likelihood().data(), this->allele_log_likelihood_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Locus)
}

::google::protobuf::uint8* Locus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Locus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "vg.Locus.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .vg.Path allele = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->allele_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->allele(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.Support support = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->support_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->support(static_cast<int>(i)), deterministic, target);
  }

  // repeated .vg.Genotype genotype = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->genotype_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->genotype(static_cast<int>(i)), deterministic, target);
  }

  // .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_overall_support(), deterministic, target);
  }

  // repeated double allele_log_likelihood = 6;
  if (this->allele_log_likelihood_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allele_log_likelihood_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->allele_log_likelihood_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Locus)
  return target;
}

size_t Locus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Locus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .vg.Path allele = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->allele_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->allele(static_cast<int>(i)));
    }
  }

  // repeated .vg.Support support = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->support_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->support(static_cast<int>(i)));
    }
  }

  // repeated .vg.Genotype genotype = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->genotype_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->genotype(static_cast<int>(i)));
    }
  }

  // repeated double allele_log_likelihood = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->allele_log_likelihood_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allele_log_likelihood_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .vg.Support overall_support = 5;
  if (this->has_overall_support()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *overall_support_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Locus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Locus)
  GOOGLE_DCHECK_NE(&from, this);
  const Locus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Locus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Locus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Locus)
    MergeFrom(*source);
  }
}

void Locus::MergeFrom(const Locus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Locus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allele_.MergeFrom(from.allele_);
  support_.MergeFrom(from.support_);
  genotype_.MergeFrom(from.genotype_);
  allele_log_likelihood_.MergeFrom(from.allele_log_likelihood_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_overall_support()) {
    mutable_overall_support()->::vg::Support::MergeFrom(from.overall_support());
  }
}

void Locus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Locus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Locus::CopyFrom(const Locus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Locus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Locus::IsInitialized() const {
  return true;
}

void Locus::Swap(Locus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Locus::InternalSwap(Locus* other) {
  using std::swap;
  CastToBase(&allele_)->InternalSwap(CastToBase(&other->allele_));
  CastToBase(&support_)->InternalSwap(CastToBase(&other->support_));
  CastToBase(&genotype_)->InternalSwap(CastToBase(&other->genotype_));
  allele_log_likelihood_.InternalSwap(&other->allele_log_likelihood_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(overall_support_, other->overall_support_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Locus::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Genotype::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Genotype::kAlleleFieldNumber;
const int Genotype::kIsPhasedFieldNumber;
const int Genotype::kLikelihoodFieldNumber;
const int Genotype::kLogLikelihoodFieldNumber;
const int Genotype::kLogPriorFieldNumber;
const int Genotype::kLogPosteriorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Genotype::Genotype()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Genotype.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Genotype)
}
Genotype::Genotype(const Genotype& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      allele_(from.allele_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&likelihood_, &from.likelihood_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_phased_) -
    reinterpret_cast<char*>(&likelihood_)) + sizeof(is_phased_));
  // @@protoc_insertion_point(copy_constructor:vg.Genotype)
}

void Genotype::SharedCtor() {
  ::memset(&likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_phased_) -
      reinterpret_cast<char*>(&likelihood_)) + sizeof(is_phased_));
}

Genotype::~Genotype() {
  // @@protoc_insertion_point(destructor:vg.Genotype)
  SharedDtor();
}

void Genotype::SharedDtor() {
}

void Genotype::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Genotype::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Genotype& Genotype::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Genotype.base);
  return *internal_default_instance();
}


void Genotype::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Genotype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allele_.Clear();
  ::memset(&likelihood_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_phased_) -
      reinterpret_cast<char*>(&likelihood_)) + sizeof(is_phased_));
  _internal_metadata_.Clear();
}

bool Genotype::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Genotype)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 allele = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_allele())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_allele())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_phased = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_phased_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double likelihood = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &likelihood_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double log_likelihood = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &log_likelihood_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double log_prior = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &log_prior_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double log_posterior = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &log_posterior_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Genotype)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Genotype)
  return false;
#undef DO_
}

void Genotype::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Genotype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 allele = 1;
  if (this->allele_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _allele_cached_byte_size_));
  }
  for (int i = 0, n = this->allele_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->allele(i), output);
  }

  // bool is_phased = 2;
  if (this->is_phased() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_phased(), output);
  }

  // double likelihood = 3;
  if (this->likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->likelihood(), output);
  }

  // double log_likelihood = 4;
  if (this->log_likelihood() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->log_likelihood(), output);
  }

  // double log_prior = 5;
  if (this->log_prior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->log_prior(), output);
  }

  // double log_posterior = 6;
  if (this->log_posterior() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->log_posterior(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Genotype)
}

::google::protobuf::uint8* Genotype::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Genotype)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 allele = 1;
  if (this->allele_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _allele_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->allele_, target);
  }

  // bool is_phased = 2;
  if (this->is_phased() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_phased(), target);
  }

  // double likelihood = 3;
  if (this->likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->likelihood(), target);
  }

  // double log_likelihood = 4;
  if (this->log_likelihood() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->log_likelihood(), target);
  }

  // double log_prior = 5;
  if (this->log_prior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->log_prior(), target);
  }

  // double log_posterior = 6;
  if (this->log_posterior() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->log_posterior(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Genotype)
  return target;
}

size_t Genotype::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Genotype)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 allele = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->allele_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _allele_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double likelihood = 3;
  if (this->likelihood() != 0) {
    total_size += 1 + 8;
  }

  // double log_likelihood = 4;
  if (this->log_likelihood() != 0) {
    total_size += 1 + 8;
  }

  // double log_prior = 5;
  if (this->log_prior() != 0) {
    total_size += 1 + 8;
  }

  // double log_posterior = 6;
  if (this->log_posterior() != 0) {
    total_size += 1 + 8;
  }

  // bool is_phased = 2;
  if (this->is_phased() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Genotype::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Genotype)
  GOOGLE_DCHECK_NE(&from, this);
  const Genotype* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Genotype>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Genotype)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Genotype)
    MergeFrom(*source);
  }
}

void Genotype::MergeFrom(const Genotype& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Genotype)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allele_.MergeFrom(from.allele_);
  if (from.likelihood() != 0) {
    set_likelihood(from.likelihood());
  }
  if (from.log_likelihood() != 0) {
    set_log_likelihood(from.log_likelihood());
  }
  if (from.log_prior() != 0) {
    set_log_prior(from.log_prior());
  }
  if (from.log_posterior() != 0) {
    set_log_posterior(from.log_posterior());
  }
  if (from.is_phased() != 0) {
    set_is_phased(from.is_phased());
  }
}

void Genotype::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Genotype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Genotype::CopyFrom(const Genotype& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Genotype)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Genotype::IsInitialized() const {
  return true;
}

void Genotype::Swap(Genotype* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Genotype::InternalSwap(Genotype* other) {
  using std::swap;
  allele_.InternalSwap(&other->allele_);
  swap(likelihood_, other->likelihood_);
  swap(log_likelihood_, other->log_likelihood_);
  swap(log_prior_, other->log_prior_);
  swap(log_posterior_, other->log_posterior_);
  swap(is_phased_, other->is_phased_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Genotype::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Support::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Support::kQualityFieldNumber;
const int Support::kForwardFieldNumber;
const int Support::kReverseFieldNumber;
const int Support::kLeftFieldNumber;
const int Support::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Support::Support()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Support.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Support)
}
Support::Support(const Support& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&quality_, &from.quality_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&quality_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:vg.Support)
}

void Support::SharedCtor() {
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(right_));
}

Support::~Support() {
  // @@protoc_insertion_point(destructor:vg.Support)
  SharedDtor();
}

void Support::SharedDtor() {
}

void Support::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Support::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Support& Support::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Support.base);
  return *internal_default_instance();
}


void Support::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Support)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(right_));
  _internal_metadata_.Clear();
}

bool Support::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Support)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double quality = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reverse = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reverse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Support)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Support)
  return false;
#undef DO_
}

void Support::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Support)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quality = 1;
  if (this->quality() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->quality(), output);
  }

  // double forward = 2;
  if (this->forward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->forward(), output);
  }

  // double reverse = 3;
  if (this->reverse() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->reverse(), output);
  }

  // double left = 4;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->left(), output);
  }

  // double right = 5;
  if (this->right() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->right(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Support)
}

::google::protobuf::uint8* Support::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Support)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quality = 1;
  if (this->quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->quality(), target);
  }

  // double forward = 2;
  if (this->forward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->forward(), target);
  }

  // double reverse = 3;
  if (this->reverse() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->reverse(), target);
  }

  // double left = 4;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->left(), target);
  }

  // double right = 5;
  if (this->right() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->right(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Support)
  return target;
}

size_t Support::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Support)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // double quality = 1;
  if (this->quality() != 0) {
    total_size += 1 + 8;
  }

  // double forward = 2;
  if (this->forward() != 0) {
    total_size += 1 + 8;
  }

  // double reverse = 3;
  if (this->reverse() != 0) {
    total_size += 1 + 8;
  }

  // double left = 4;
  if (this->left() != 0) {
    total_size += 1 + 8;
  }

  // double right = 5;
  if (this->right() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Support::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Support)
  GOOGLE_DCHECK_NE(&from, this);
  const Support* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Support>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Support)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Support)
    MergeFrom(*source);
  }
}

void Support::MergeFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Support)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.quality() != 0) {
    set_quality(from.quality());
  }
  if (from.forward() != 0) {
    set_forward(from.forward());
  }
  if (from.reverse() != 0) {
    set_reverse(from.reverse());
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.right() != 0) {
    set_right(from.right());
  }
}

void Support::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Support::CopyFrom(const Support& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Support::IsInitialized() const {
  return true;
}

void Support::Swap(Support* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Support::InternalSwap(Support* other) {
  using std::swap;
  swap(quality_, other->quality_);
  swap(forward_, other->forward_);
  swap(reverse_, other->reverse_);
  swap(left_, other->left_);
  swap(right_, other->right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Support::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LocationSupport::InitAsDefaultInstance() {
  ::vg::_LocationSupport_default_instance_._instance.get_mutable()->support_ = const_cast< ::vg::Support*>(
      ::vg::Support::internal_default_instance());
  ::vg::_LocationSupport_default_instance_.edge_ = const_cast< ::vg::Edge*>(
      ::vg::Edge::internal_default_instance());
  ::vg::_LocationSupport_default_instance_.node_id_ = GOOGLE_LONGLONG(0);
}
void LocationSupport::set_allocated_edge(::vg::Edge* edge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_oneof_location();
  if (edge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      edge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, edge, submessage_arena);
    }
    set_has_edge();
    oneof_location_.edge_ = edge;
  }
  // @@protoc_insertion_point(field_set_allocated:vg.LocationSupport.edge)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocationSupport::kSupportFieldNumber;
const int LocationSupport::kEdgeFieldNumber;
const int LocationSupport::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocationSupport::LocationSupport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_LocationSupport.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.LocationSupport)
}
LocationSupport::LocationSupport(const LocationSupport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_support()) {
    support_ = new ::vg::Support(*from.support_);
  } else {
    support_ = NULL;
  }
  clear_has_oneof_location();
  switch (from.oneof_location_case()) {
    case kEdge: {
      mutable_edge()->::vg::Edge::MergeFrom(from.edge());
      break;
    }
    case kNodeId: {
      set_node_id(from.node_id());
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:vg.LocationSupport)
}

void LocationSupport::SharedCtor() {
  support_ = NULL;
  clear_has_oneof_location();
}

LocationSupport::~LocationSupport() {
  // @@protoc_insertion_point(destructor:vg.LocationSupport)
  SharedDtor();
}

void LocationSupport::SharedDtor() {
  if (this != internal_default_instance()) delete support_;
  if (has_oneof_location()) {
    clear_oneof_location();
  }
}

void LocationSupport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LocationSupport::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LocationSupport& LocationSupport::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_LocationSupport.base);
  return *internal_default_instance();
}


void LocationSupport::clear_oneof_location() {
// @@protoc_insertion_point(one_of_clear_start:vg.LocationSupport)
  switch (oneof_location_case()) {
    case kEdge: {
      delete oneof_location_.edge_;
      break;
    }
    case kNodeId: {
      // No need to clear
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_LOCATION_NOT_SET;
}


void LocationSupport::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.LocationSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && support_ != NULL) {
    delete support_;
  }
  support_ = NULL;
  clear_oneof_location();
  _internal_metadata_.Clear();
}

bool LocationSupport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.LocationSupport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vg.Support support = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_support()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Edge edge = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          clear_oneof_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &oneof_location_.node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.LocationSupport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.LocationSupport)
  return false;
#undef DO_
}

void LocationSupport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.LocationSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Support support = 1;
  if (this->has_support()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_support(), output);
  }

  // .vg.Edge edge = 2;
  if (has_edge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_edge(), output);
  }

  // int64 node_id = 3;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->node_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.LocationSupport)
}

::google::protobuf::uint8* LocationSupport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.LocationSupport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Support support = 1;
  if (this->has_support()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_support(), deterministic, target);
  }

  // .vg.Edge edge = 2;
  if (has_edge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_edge(), deterministic, target);
  }

  // int64 node_id = 3;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->node_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.LocationSupport)
  return target;
}

size_t LocationSupport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.LocationSupport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vg.Support support = 1;
  if (this->has_support()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *support_);
  }

  switch (oneof_location_case()) {
    // .vg.Edge edge = 2;
    case kEdge: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *oneof_location_.edge_);
      break;
    }
    // int64 node_id = 3;
    case kNodeId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->node_id());
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationSupport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.LocationSupport)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationSupport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LocationSupport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.LocationSupport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.LocationSupport)
    MergeFrom(*source);
  }
}

void LocationSupport::MergeFrom(const LocationSupport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.LocationSupport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_support()) {
    mutable_support()->::vg::Support::MergeFrom(from.support());
  }
  switch (from.oneof_location_case()) {
    case kEdge: {
      mutable_edge()->::vg::Edge::MergeFrom(from.edge());
      break;
    }
    case kNodeId: {
      set_node_id(from.node_id());
      break;
    }
    case ONEOF_LOCATION_NOT_SET: {
      break;
    }
  }
}

void LocationSupport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.LocationSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationSupport::CopyFrom(const LocationSupport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.LocationSupport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationSupport::IsInitialized() const {
  return true;
}

void LocationSupport::Swap(LocationSupport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocationSupport::InternalSwap(LocationSupport* other) {
  using std::swap;
  swap(support_, other->support_);
  swap(oneof_location_, other->oneof_location_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LocationSupport::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Translation::InitAsDefaultInstance() {
  ::vg::_Translation_default_instance_._instance.get_mutable()->from_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
  ::vg::_Translation_default_instance_._instance.get_mutable()->to_ = const_cast< ::vg::Path*>(
      ::vg::Path::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Translation::kFromFieldNumber;
const int Translation::kToFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Translation::Translation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_vg_2eproto::scc_info_Translation.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:vg.Translation)
}
Translation::Translation(const Translation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::vg::Path(*from.from_);
  } else {
    from_ = NULL;
  }
  if (from.has_to()) {
    to_ = new ::vg::Path(*from.to_);
  } else {
    to_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:vg.Translation)
}

void Translation::SharedCtor() {
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

Translation::~Translation() {
  // @@protoc_insertion_point(destructor:vg.Translation)
  SharedDtor();
}

void Translation::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void Translation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Translation::descriptor() {
  ::protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Translation& Translation::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_vg_2eproto::scc_info_Translation.base);
  return *internal_default_instance();
}


void Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:vg.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && from_ != NULL) {
    delete from_;
  }
  from_ = NULL;
  if (GetArenaNoVirtual() == NULL && to_ != NULL) {
    delete to_;
  }
  to_ = NULL;
  _internal_metadata_.Clear();
}

bool Translation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:vg.Translation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .vg.Path from = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .vg.Path to = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:vg.Translation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:vg.Translation)
  return false;
#undef DO_
}

void Translation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:vg.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Path from = 1;
  if (this->has_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_from(), output);
  }

  // .vg.Path to = 2;
  if (this->has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_to(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:vg.Translation)
}

::google::protobuf::uint8* Translation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:vg.Translation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vg.Path from = 1;
  if (this->has_from()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_from(), deterministic, target);
  }

  // .vg.Path to = 2;
  if (this->has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_to(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vg.Translation)
  return target;
}

size_t Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vg.Translation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .vg.Path from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .vg.Path to = 2;
  if (this->has_to()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *to_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Translation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vg.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  const Translation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Translation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vg.Translation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vg.Translation)
    MergeFrom(*source);
  }
}

void Translation::MergeFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vg.Translation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    mutable_from()->::vg::Path::MergeFrom(from.from());
  }
  if (from.has_to()) {
    mutable_to()->::vg::Path::MergeFrom(from.to());
  }
}

void Translation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vg.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Translation::CopyFrom(const Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vg.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Translation::IsInitialized() const {
  return true;
}

void Translation::Swap(Translation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Translation::InternalSwap(Translation* other) {
  using std::swap;
  swap(from_, other->from_);
  swap(to_, other->to_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Translation::GetMetadata() const {
  protobuf_vg_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_vg_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Graph* Arena::CreateMaybeMessage< ::vg::Graph >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Graph >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Node* Arena::CreateMaybeMessage< ::vg::Node >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Node >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Edge* Arena::CreateMaybeMessage< ::vg::Edge >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Edge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Edit* Arena::CreateMaybeMessage< ::vg::Edit >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Edit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Mapping* Arena::CreateMaybeMessage< ::vg::Mapping >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Mapping >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Position* Arena::CreateMaybeMessage< ::vg::Position >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Path* Arena::CreateMaybeMessage< ::vg::Path >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Path >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Alignment* Arena::CreateMaybeMessage< ::vg::Alignment >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Alignment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::MultipathAlignment* Arena::CreateMaybeMessage< ::vg::MultipathAlignment >(Arena* arena) {
  return Arena::CreateInternal< ::vg::MultipathAlignment >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Subpath* Arena::CreateMaybeMessage< ::vg::Subpath >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Subpath >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::KmerMatch* Arena::CreateMaybeMessage< ::vg::KmerMatch >(Arena* arena) {
  return Arena::CreateInternal< ::vg::KmerMatch >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::BasePileup* Arena::CreateMaybeMessage< ::vg::BasePileup >(Arena* arena) {
  return Arena::CreateInternal< ::vg::BasePileup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::NodePileup* Arena::CreateMaybeMessage< ::vg::NodePileup >(Arena* arena) {
  return Arena::CreateInternal< ::vg::NodePileup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::EdgePileup* Arena::CreateMaybeMessage< ::vg::EdgePileup >(Arena* arena) {
  return Arena::CreateInternal< ::vg::EdgePileup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Pileup* Arena::CreateMaybeMessage< ::vg::Pileup >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Pileup >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Snarl* Arena::CreateMaybeMessage< ::vg::Snarl >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Snarl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Visit* Arena::CreateMaybeMessage< ::vg::Visit >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Visit >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::SnarlTraversal* Arena::CreateMaybeMessage< ::vg::SnarlTraversal >(Arena* arena) {
  return Arena::CreateInternal< ::vg::SnarlTraversal >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Locus* Arena::CreateMaybeMessage< ::vg::Locus >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Locus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Genotype* Arena::CreateMaybeMessage< ::vg::Genotype >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Genotype >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Support* Arena::CreateMaybeMessage< ::vg::Support >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Support >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::LocationSupport* Arena::CreateMaybeMessage< ::vg::LocationSupport >(Arena* arena) {
  return Arena::CreateInternal< ::vg::LocationSupport >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::vg::Translation* Arena::CreateMaybeMessage< ::vg::Translation >(Arena* arena) {
  return Arena::CreateInternal< ::vg::Translation >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
